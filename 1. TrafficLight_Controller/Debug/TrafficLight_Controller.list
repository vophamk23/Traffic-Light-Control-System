
TrafficLight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002afc  08002afc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002afc  08002afc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002afc  08002afc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000064  08002b68  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002b68  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a29  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf9  00000000  00000000  00029ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b0d  00000000  00000000  0002cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b648  00000000  00000000  0004360d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828b0  00000000  00000000  0004ec55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a04  00000000  00000000  000d1558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ac0 	.word	0x08002ac0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002ac0 	.word	0x08002ac0

0800014c <update_7seg_display>:
 * Logic hoạt động:
 * - Kiểm tra mode hiện tại
 * - Hiển thị thông tin tương ứng với từng mode
 */
void update_7seg_display(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    // ============ CHẾ ĐỘ HOẠT ĐỘNG BÌNH THƯỜNG ============
    if (current_mode == MODE_1_NORMAL)
 8000150:	4b11      	ldr	r3, [pc, #68]	; (8000198 <update_7seg_display+0x4c>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d10d      	bne.n	8000174 <update_7seg_display+0x28>
    {
        // Hiển thị thời gian đếm ngược của đèn giao thông

        display_7seg_left(counter_road1);  // Bên trái: thời gian đường 1
 8000158:	4b10      	ldr	r3, [pc, #64]	; (800019c <update_7seg_display+0x50>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4618      	mov	r0, r3
 800015e:	f000 f823 	bl	80001a8 <display_7seg_left>
        display_7seg_right(counter_road2); // Bên phải: thời gian đường 2
 8000162:	4b0f      	ldr	r3, [pc, #60]	; (80001a0 <update_7seg_display+0x54>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	4618      	mov	r0, r3
 8000168:	f000 f89c 	bl	80002a4 <display_7seg_right>
        display_7seg_mode(1);              // Hiển thị số mode = 1
 800016c:	2001      	movs	r0, #1
 800016e:	f000 f915 	bl	800039c <display_7seg_mode>

        display_7seg_left(temp_duration);  // Bên trái: giá trị tạm thời
        display_7seg_right(temp_duration); // Bên phải: giá trị tạm thời (giống bên trái)
        display_7seg_mode(current_mode);   // Hiển thị số mode hiện tại (2, 3, hoặc 4)
    }
}
 8000172:	e00e      	b.n	8000192 <update_7seg_display+0x46>
        display_7seg_left(temp_duration);  // Bên trái: giá trị tạm thời
 8000174:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <update_7seg_display+0x58>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4618      	mov	r0, r3
 800017a:	f000 f815 	bl	80001a8 <display_7seg_left>
        display_7seg_right(temp_duration); // Bên phải: giá trị tạm thời (giống bên trái)
 800017e:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <update_7seg_display+0x58>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4618      	mov	r0, r3
 8000184:	f000 f88e 	bl	80002a4 <display_7seg_right>
        display_7seg_mode(current_mode);   // Hiển thị số mode hiện tại (2, 3, hoặc 4)
 8000188:	4b03      	ldr	r3, [pc, #12]	; (8000198 <update_7seg_display+0x4c>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f905 	bl	800039c <display_7seg_mode>
}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	20000050 	.word	0x20000050
 800019c:	200000a0 	.word	0x200000a0
 80001a0:	200000a4 	.word	0x200000a4
 80001a4:	2000009c 	.word	0x2000009c

080001a8 <display_7seg_left>:
 * - Tách số thành hàng chục và hàng đơn vị
 * - Mỗi chữ số được mã hóa thành 4 bit BCD
 * - Xuất 4 bit ra 4 chân GPIO tương ứng
 */
void display_7seg_left(int num)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
    // Tách số thành 2 chữ số
    int tens = num / 10;  // Lấy chữ số hàng chục (vd: 45 -> 4)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4a39      	ldr	r2, [pc, #228]	; (8000298 <display_7seg_left+0xf0>)
 80001b4:	fb82 1203 	smull	r1, r2, r2, r3
 80001b8:	1092      	asrs	r2, r2, #2
 80001ba:	17db      	asrs	r3, r3, #31
 80001bc:	1ad3      	subs	r3, r2, r3
 80001be:	60fb      	str	r3, [r7, #12]
    int units = num % 10; // Lấy chữ số hàng đơn vị (vd: 45 -> 5)
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	4b35      	ldr	r3, [pc, #212]	; (8000298 <display_7seg_left+0xf0>)
 80001c4:	fb83 1302 	smull	r1, r3, r3, r2
 80001c8:	1099      	asrs	r1, r3, #2
 80001ca:	17d3      	asrs	r3, r2, #31
 80001cc:	1ac9      	subs	r1, r1, r3
 80001ce:	460b      	mov	r3, r1
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	440b      	add	r3, r1
 80001d4:	005b      	lsls	r3, r3, #1
 80001d6:	1ad3      	subs	r3, r2, r3
 80001d8:	60bb      	str	r3, [r7, #8]

    // ============ SEG0 - LED 7 đoạn hiển thị HÀNG CHỤC ============
    // Sử dụng 4 chân PA12-PA15 của GPIOA

    // Bit 0 (LSB - Least Significant Bit): PA12
    HAL_GPIO_WritePin(GPIOA, inputseg0_0_Pin, (tens & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	461a      	mov	r2, r3
 80001e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ea:	482c      	ldr	r0, [pc, #176]	; (800029c <display_7seg_left+0xf4>)
 80001ec:	f001 fc6b 	bl	8001ac6 <HAL_GPIO_WritePin>

    // Bit 1: PA13
    HAL_GPIO_WritePin(GPIOA, inputseg0_1_Pin, (tens & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	105b      	asrs	r3, r3, #1
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	f003 0301 	and.w	r3, r3, #1
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	461a      	mov	r2, r3
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4826      	ldr	r0, [pc, #152]	; (800029c <display_7seg_left+0xf4>)
 8000204:	f001 fc5f 	bl	8001ac6 <HAL_GPIO_WritePin>

    // Bit 2: PA14
    HAL_GPIO_WritePin(GPIOA, inputseg0_2_Pin, (tens & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	109b      	asrs	r3, r3, #2
 800020c:	b2db      	uxtb	r3, r3
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	b2db      	uxtb	r3, r3
 8000214:	461a      	mov	r2, r3
 8000216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800021a:	4820      	ldr	r0, [pc, #128]	; (800029c <display_7seg_left+0xf4>)
 800021c:	f001 fc53 	bl	8001ac6 <HAL_GPIO_WritePin>

    // Bit 3 (MSB - Most Significant Bit): PA15
    HAL_GPIO_WritePin(GPIOA, inputseg0_3_Pin, (tens & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	10db      	asrs	r3, r3, #3
 8000224:	b2db      	uxtb	r3, r3
 8000226:	f003 0301 	and.w	r3, r3, #1
 800022a:	b2db      	uxtb	r3, r3
 800022c:	461a      	mov	r2, r3
 800022e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000232:	481a      	ldr	r0, [pc, #104]	; (800029c <display_7seg_left+0xf4>)
 8000234:	f001 fc47 	bl	8001ac6 <HAL_GPIO_WritePin>

    // ============ SEG1 - LED 7 đoạn hiển thị HÀNG ĐƠN VỊ ============
    // Sử dụng 4 chân PB0-PB3 của GPIOB

    // Bit 0: PB0
    HAL_GPIO_WritePin(GPIOB, inputseg1_0_Pin, (units & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	f003 0301 	and.w	r3, r3, #1
 8000240:	b2db      	uxtb	r3, r3
 8000242:	461a      	mov	r2, r3
 8000244:	2101      	movs	r1, #1
 8000246:	4816      	ldr	r0, [pc, #88]	; (80002a0 <display_7seg_left+0xf8>)
 8000248:	f001 fc3d 	bl	8001ac6 <HAL_GPIO_WritePin>

    // Bit 1: PB1
    HAL_GPIO_WritePin(GPIOB, inputseg1_1_Pin, (units & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	105b      	asrs	r3, r3, #1
 8000250:	b2db      	uxtb	r3, r3
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	b2db      	uxtb	r3, r3
 8000258:	461a      	mov	r2, r3
 800025a:	2102      	movs	r1, #2
 800025c:	4810      	ldr	r0, [pc, #64]	; (80002a0 <display_7seg_left+0xf8>)
 800025e:	f001 fc32 	bl	8001ac6 <HAL_GPIO_WritePin>

    // Bit 2: PB2
    HAL_GPIO_WritePin(GPIOB, inputseg1_2_Pin, (units & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	109b      	asrs	r3, r3, #2
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	461a      	mov	r2, r3
 8000270:	2104      	movs	r1, #4
 8000272:	480b      	ldr	r0, [pc, #44]	; (80002a0 <display_7seg_left+0xf8>)
 8000274:	f001 fc27 	bl	8001ac6 <HAL_GPIO_WritePin>

    // Bit 3: PB3
    HAL_GPIO_WritePin(GPIOB, inputseg1_3_Pin, (units & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	10db      	asrs	r3, r3, #3
 800027c:	b2db      	uxtb	r3, r3
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	b2db      	uxtb	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	2108      	movs	r1, #8
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <display_7seg_left+0xf8>)
 800028a:	f001 fc1c 	bl	8001ac6 <HAL_GPIO_WritePin>
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	66666667 	.word	0x66666667
 800029c:	40010800 	.word	0x40010800
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <display_7seg_right>:
 * @param num: Số cần hiển thị (0-99)
 *
 * Tương tự hàm display_7seg_left nhưng dùng các chân GPIO khác
 */
void display_7seg_right(int num)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    // Tách số thành 2 chữ số
    int tens = num / 10;  // Hàng chục
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a39      	ldr	r2, [pc, #228]	; (8000394 <display_7seg_right+0xf0>)
 80002b0:	fb82 1203 	smull	r1, r2, r2, r3
 80002b4:	1092      	asrs	r2, r2, #2
 80002b6:	17db      	asrs	r3, r3, #31
 80002b8:	1ad3      	subs	r3, r2, r3
 80002ba:	60fb      	str	r3, [r7, #12]
    int units = num % 10; // Hàng đơn vị
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	4b35      	ldr	r3, [pc, #212]	; (8000394 <display_7seg_right+0xf0>)
 80002c0:	fb83 1302 	smull	r1, r3, r3, r2
 80002c4:	1099      	asrs	r1, r3, #2
 80002c6:	17d3      	asrs	r3, r2, #31
 80002c8:	1ac9      	subs	r1, r1, r3
 80002ca:	460b      	mov	r3, r1
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	440b      	add	r3, r1
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	60bb      	str	r3, [r7, #8]

    // ============ SEG2 - LED 7 đoạn hiển thị HÀNG CHỤC ============
    // Sử dụng 4 chân PB4-PB7 của GPIOB
    HAL_GPIO_WritePin(GPIOB, inputseg2_0_Pin, (tens & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	2110      	movs	r1, #16
 80002e4:	482c      	ldr	r0, [pc, #176]	; (8000398 <display_7seg_right+0xf4>)
 80002e6:	f001 fbee 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, inputseg2_1_Pin, (tens & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	105b      	asrs	r3, r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	f003 0301 	and.w	r3, r3, #1
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	461a      	mov	r2, r3
 80002f8:	2120      	movs	r1, #32
 80002fa:	4827      	ldr	r0, [pc, #156]	; (8000398 <display_7seg_right+0xf4>)
 80002fc:	f001 fbe3 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, inputseg2_2_Pin, (tens & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	109b      	asrs	r3, r3, #2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	b2db      	uxtb	r3, r3
 800030c:	461a      	mov	r2, r3
 800030e:	2140      	movs	r1, #64	; 0x40
 8000310:	4821      	ldr	r0, [pc, #132]	; (8000398 <display_7seg_right+0xf4>)
 8000312:	f001 fbd8 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, inputseg2_3_Pin, (tens & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	10db      	asrs	r3, r3, #3
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	2180      	movs	r1, #128	; 0x80
 8000326:	481c      	ldr	r0, [pc, #112]	; (8000398 <display_7seg_right+0xf4>)
 8000328:	f001 fbcd 	bl	8001ac6 <HAL_GPIO_WritePin>

    // ============ SEG3 - LED 7 đoạn hiển thị HÀNG ĐƠN VỊ ============
    // Sử dụng 4 chân PB8-PB11 của GPIOB
    HAL_GPIO_WritePin(GPIOB, inputseg3_0_Pin, (units & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	461a      	mov	r2, r3
 8000338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <display_7seg_right+0xf4>)
 800033e:	f001 fbc2 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, inputseg3_1_Pin, (units & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	105b      	asrs	r3, r3, #1
 8000346:	b2db      	uxtb	r3, r3
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	b2db      	uxtb	r3, r3
 800034e:	461a      	mov	r2, r3
 8000350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000354:	4810      	ldr	r0, [pc, #64]	; (8000398 <display_7seg_right+0xf4>)
 8000356:	f001 fbb6 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, inputseg3_2_Pin, (units & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	109b      	asrs	r3, r3, #2
 800035e:	b2db      	uxtb	r3, r3
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	b2db      	uxtb	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036c:	480a      	ldr	r0, [pc, #40]	; (8000398 <display_7seg_right+0xf4>)
 800036e:	f001 fbaa 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, inputseg3_3_Pin, (units & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	10db      	asrs	r3, r3, #3
 8000376:	b2db      	uxtb	r3, r3
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	b2db      	uxtb	r3, r3
 800037e:	461a      	mov	r2, r3
 8000380:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <display_7seg_right+0xf4>)
 8000386:	f001 fb9e 	bl	8001ac6 <HAL_GPIO_WritePin>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	66666667 	.word	0x66666667
 8000398:	40010c00 	.word	0x40010c00

0800039c <display_7seg_mode>:
 * Chức năng:
 * - Hiển thị chế độ hoạt động hiện tại của hệ thống
 * - Ví dụ: Mode 1 (Normal), Mode 2 (Adjust Red), Mode 3 (Adjust Yellow), v.v.
 */
void display_7seg_mode(int mode)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
    // Hiển thị mode sử dụng 4 chân PB12-PB15 của GPIOB

    // Bit 0: PB12
    HAL_GPIO_WritePin(GPIOB, inputmode_0_Pin, (mode & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	461a      	mov	r2, r3
 80003b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b4:	4815      	ldr	r0, [pc, #84]	; (800040c <display_7seg_mode+0x70>)
 80003b6:	f001 fb86 	bl	8001ac6 <HAL_GPIO_WritePin>
    // Bit 1: PB13
    HAL_GPIO_WritePin(GPIOB, inputmode_1_Pin, (mode & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	105b      	asrs	r3, r3, #1
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	461a      	mov	r2, r3
 80003c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <display_7seg_mode+0x70>)
 80003ce:	f001 fb7a 	bl	8001ac6 <HAL_GPIO_WritePin>
    // Bit 2: PB14
    HAL_GPIO_WritePin(GPIOB, inputmode_2_Pin, (mode & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	109b      	asrs	r3, r3, #2
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	461a      	mov	r2, r3
 80003e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <display_7seg_mode+0x70>)
 80003e6:	f001 fb6e 	bl	8001ac6 <HAL_GPIO_WritePin>
    // Bit 3: PB15
    HAL_GPIO_WritePin(GPIOB, inputmode_3_Pin, (mode & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	10db      	asrs	r3, r3, #3
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	f003 0301 	and.w	r3, r3, #1
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fc:	4803      	ldr	r0, [pc, #12]	; (800040c <display_7seg_mode+0x70>)
 80003fe:	f001 fb62 	bl	8001ac6 <HAL_GPIO_WritePin>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010c00 	.word	0x40010c00

08000410 <isButton1Pressed>:
/* ==================================================================
 * HÀM KIỂM TRA TRẠNG THÁI NÚT (GỌI TRONG MAIN)
 * ================================================================== */

int isButton1Pressed()
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  if (button_flag[0] == 1)
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <isButton1Pressed+0x20>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d104      	bne.n	8000426 <isButton1Pressed+0x16>
  {
    button_flag[0] = 0;
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <isButton1Pressed+0x20>)
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
    return 1;
 8000422:	2301      	movs	r3, #1
 8000424:	e000      	b.n	8000428 <isButton1Pressed+0x18>
  }
  return 0;
 8000426:	2300      	movs	r3, #0
}
 8000428:	4618      	mov	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000080 	.word	0x20000080

08000434 <isButton2Pressed>:

int isButton2Pressed()
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  if (button_flag[1] == 1)
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <isButton2Pressed+0x20>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d104      	bne.n	800044a <isButton2Pressed+0x16>
  {
    button_flag[1] = 0;
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <isButton2Pressed+0x20>)
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
    return 1;
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <isButton2Pressed+0x18>
  }
  return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	20000080 	.word	0x20000080

08000458 <isButton3Pressed>:

int isButton3Pressed()
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  if (button_flag[2] == 1)
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <isButton3Pressed+0x20>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d104      	bne.n	800046e <isButton3Pressed+0x16>
  {
    button_flag[2] = 0;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <isButton3Pressed+0x20>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
    return 1;
 800046a:	2301      	movs	r3, #1
 800046c:	e000      	b.n	8000470 <isButton3Pressed+0x18>
  }
  return 0;
 800046e:	2300      	movs	r3, #0
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000080 	.word	0x20000080

0800047c <subKeyProcess>:
/* ==================================================================
 * XỬ LÝ SỰ KIỆN NÚT BẤM
 * ================================================================== */

void subKeyProcess(int index)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  button_flag[index] = 1;
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <subKeyProcess+0x1c>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2101      	movs	r1, #1
 800048a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20000080 	.word	0x20000080

0800049c <getKeyInput>:
/* ==================================================================
 * HÀM CHÍNH - ĐỌC VÀ XỬ LÝ NÚT BẤM (GỌI TRONG TIMER INTERRUPT)
 * ================================================================== */

void getKeyInput()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  // BỎ QUA NÚT NHẤN TRONG 100ms ĐẦU TIÊN
  if(startup_counter > 0) {
 80004a2:	4b57      	ldr	r3, [pc, #348]	; (8000600 <getKeyInput+0x164>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	dd05      	ble.n	80004b6 <getKeyInput+0x1a>
    startup_counter--;
 80004aa:	4b55      	ldr	r3, [pc, #340]	; (8000600 <getKeyInput+0x164>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	4a53      	ldr	r2, [pc, #332]	; (8000600 <getKeyInput+0x164>)
 80004b2:	6013      	str	r3, [r2, #0]
    return;
 80004b4:	e0a0      	b.n	80005f8 <getKeyInput+0x15c>
  }

  for (int i = 0; i < 3; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	e099      	b.n	80005f0 <getKeyInput+0x154>
  {
    // ===== BƯỚC 1: DỊCH CHUYỂN GIÁ TRỊ CŨ =====
    KeyReg2[i] = KeyReg1[i];
 80004bc:	4a51      	ldr	r2, [pc, #324]	; (8000604 <getKeyInput+0x168>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004c4:	4950      	ldr	r1, [pc, #320]	; (8000608 <getKeyInput+0x16c>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg1[i] = KeyReg0[i];
 80004cc:	4a4f      	ldr	r2, [pc, #316]	; (800060c <getKeyInput+0x170>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d4:	494b      	ldr	r1, [pc, #300]	; (8000604 <getKeyInput+0x168>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // ===== BƯỚC 2: ĐỌC GIÁ TRỊ MỚI TỪ GPIO =====
    switch (i)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d021      	beq.n	8000526 <getKeyInput+0x8a>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	dc2a      	bgt.n	800053e <getKeyInput+0xa2>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <getKeyInput+0x5a>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d00c      	beq.n	800050e <getKeyInput+0x72>
 80004f4:	e023      	b.n	800053e <getKeyInput+0xa2>
    {
    case 0:
      KeyReg0[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 80004f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fa:	4845      	ldr	r0, [pc, #276]	; (8000610 <getKeyInput+0x174>)
 80004fc:	f001 facc 	bl	8001a98 <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	4619      	mov	r1, r3
 8000504:	4a41      	ldr	r2, [pc, #260]	; (800060c <getKeyInput+0x170>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      break;
 800050c:	e017      	b.n	800053e <getKeyInput+0xa2>
    case 1:
      KeyReg0[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 800050e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000512:	483f      	ldr	r0, [pc, #252]	; (8000610 <getKeyInput+0x174>)
 8000514:	f001 fac0 	bl	8001a98 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	4619      	mov	r1, r3
 800051c:	4a3b      	ldr	r2, [pc, #236]	; (800060c <getKeyInput+0x170>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      break;
 8000524:	e00b      	b.n	800053e <getKeyInput+0xa2>
    case 2:
      KeyReg0[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052a:	4839      	ldr	r0, [pc, #228]	; (8000610 <getKeyInput+0x174>)
 800052c:	f001 fab4 	bl	8001a98 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	4619      	mov	r1, r3
 8000534:	4a35      	ldr	r2, [pc, #212]	; (800060c <getKeyInput+0x170>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      break;
 800053c:	bf00      	nop
    }

    // ===== BƯỚC 3: DEBOUNCING - KIỂM TRA 3 LẦN ĐỌC GIỐNG NHAU =====
    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i]))
 800053e:	4a31      	ldr	r2, [pc, #196]	; (8000604 <getKeyInput+0x168>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000546:	4931      	ldr	r1, [pc, #196]	; (800060c <getKeyInput+0x170>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800054e:	429a      	cmp	r2, r3
 8000550:	d14b      	bne.n	80005ea <getKeyInput+0x14e>
 8000552:	4a2c      	ldr	r2, [pc, #176]	; (8000604 <getKeyInput+0x168>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055a:	492b      	ldr	r1, [pc, #172]	; (8000608 <getKeyInput+0x16c>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000562:	429a      	cmp	r2, r3
 8000564:	d141      	bne.n	80005ea <getKeyInput+0x14e>
    {
      // ===== BƯỚC 4: PHÁT HIỆN THAY ĐỔI TRẠNG THÁI =====
      if (KeyReg3[i] != KeyReg2[i])
 8000566:	4a2b      	ldr	r2, [pc, #172]	; (8000614 <getKeyInput+0x178>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056e:	4926      	ldr	r1, [pc, #152]	; (8000608 <getKeyInput+0x16c>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000576:	429a      	cmp	r2, r3
 8000578:	d017      	beq.n	80005aa <getKeyInput+0x10e>
      {
        KeyReg3[i] = KeyReg2[i];
 800057a:	4a23      	ldr	r2, [pc, #140]	; (8000608 <getKeyInput+0x16c>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000582:	4924      	ldr	r1, [pc, #144]	; (8000614 <getKeyInput+0x178>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (KeyReg3[i] == PRESSED_STATE)
 800058a:	4a22      	ldr	r2, [pc, #136]	; (8000614 <getKeyInput+0x178>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d129      	bne.n	80005ea <getKeyInput+0x14e>
        {
          subKeyProcess(i);
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff ff70 	bl	800047c <subKeyProcess>
          TimeOutForKeyPress[i] = 500;  // 100 x 10ms = 1000ms
 800059c:	4a1e      	ldr	r2, [pc, #120]	; (8000618 <getKeyInput+0x17c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80005a8:	e01f      	b.n	80005ea <getKeyInput+0x14e>
        }
      }
      else
      {
        // ===== BƯỚC 5: XỬ LÝ NHẤN GIỮ (LONG PRESS) =====
        TimeOutForKeyPress[i]--;
 80005aa:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <getKeyInput+0x17c>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	4918      	ldr	r1, [pc, #96]	; (8000618 <getKeyInput+0x17c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (TimeOutForKeyPress[i] == 0)
 80005bc:	4a16      	ldr	r2, [pc, #88]	; (8000618 <getKeyInput+0x17c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d110      	bne.n	80005ea <getKeyInput+0x14e>
        {
          TimeOutForKeyPress[i] = 500;  // Reset về 1 giây
 80005c8:	4a13      	ldr	r2, [pc, #76]	; (8000618 <getKeyInput+0x17c>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

          if (KeyReg3[i] == PRESSED_STATE)
 80005d4:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <getKeyInput+0x178>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d104      	bne.n	80005ea <getKeyInput+0x14e>
          {
            button_long_pressed[i] = 1;
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <getKeyInput+0x180>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2101      	movs	r1, #1
 80005e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < 3; i++)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3301      	adds	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	f77f af62 	ble.w	80004bc <getKeyInput+0x20>
          }
        }
      }
    }
  }
}
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000003c 	.word	0x2000003c
 8000604:	2000000c 	.word	0x2000000c
 8000608:	20000018 	.word	0x20000018
 800060c:	20000000 	.word	0x20000000
 8000610:	40010800 	.word	0x40010800
 8000614:	20000024 	.word	0x20000024
 8000618:	20000030 	.word	0x20000030
 800061c:	2000008c 	.word	0x2000008c

08000620 <traffic_init>:
 * ĐƯỢC GỌI: Một lần duy nhất trong main() trước khi vào vòng lặp chính
 *
 * LƯU Ý: Phải gọi hàm này trước khi sử dụng bất kỳ chức năng nào khác
 */
void traffic_init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	/* ------------------------------------------------------------------------
	 * BƯỚC 1: THIẾT LẬP THỜI GIAN MẶC ĐỊNH
	 * ------------------------------------------------------------------------
	 */
	duration_RED = 5;      // Đèn đỏ: 5 giây
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <traffic_init+0x98>)
 8000626:	2205      	movs	r2, #5
 8000628:	601a      	str	r2, [r3, #0]
	duration_AMBER = 2;    // Đèn vàng: 2 giây
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <traffic_init+0x9c>)
 800062c:	2202      	movs	r2, #2
 800062e:	601a      	str	r2, [r3, #0]
	duration_GREEN = 3;    // Đèn xanh: 3 giây
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <traffic_init+0xa0>)
 8000632:	2203      	movs	r2, #3
 8000634:	601a      	str	r2, [r3, #0]
    /* ------------------------------------------------------------------------
	 * BƯỚC 2: THIẾT LẬP CHẾ ĐỘ HOẠT ĐỘNG BAN ĐẦU
	 * ------------------------------------------------------------------------ */

	// Bắt đầu ở chế độ hoạt động bình thường (tự động)
    current_mode = MODE_1_NORMAL;
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <traffic_init+0xa4>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
	// Trạng thái khởi tạo - sẽ chuyển sang RED_GREEN trong lần chạy đầu tiên
    traffic_state = INIT;
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <traffic_init+0xa8>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	 * BƯỚC 3: KHỞI TẠO CÁC COUNTER (BỘ ĐẾM THỜI GIAN)
	 * ------------------------------------------------------------------------
	 * counter_road1: Hiển thị thời gian còn lại của đèn trên đường 1
	 * counter_road2: Hiển thị thời gian còn lại của đèn trên đường 2
	 */
    counter_road1 = 0;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <traffic_init+0xac>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
    counter_road2 = 0;
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <traffic_init+0xb0>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]

    /* ------------------------------------------------------------------------
	 * BƯỚC 4: TẮT TẤT CẢ LED
	 * ------------------------------------------------------------------------
	 */
    turn_off_all_leds();
 800064e:	f000 fbdb 	bl	8000e08 <turn_off_all_leds>
	 *
	 * prevState[0], currState[0]: Nút MODE (Button 1)
	 * prevState[1], currState[1]: Nút MODIFY (Button 2)
	 * prevState[2], currState[2]: Nút SET (Button 3)
	 */
    prevState[0] = BTN_RELEASE;     // Nút MODE
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <traffic_init+0xb4>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
    prevState[1] = BTN_RELEASE;     // Nút MODIFY/INC
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <traffic_init+0xb4>)
 800065a:	2200      	movs	r2, #0
 800065c:	705a      	strb	r2, [r3, #1]
    prevState[2] = BTN_RELEASE;     // Nút SET
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <traffic_init+0xb4>)
 8000660:	2200      	movs	r2, #0
 8000662:	709a      	strb	r2, [r3, #2]

    currState[0] = BTN_RELEASE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <traffic_init+0xb8>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
    currState[1] = BTN_RELEASE;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <traffic_init+0xb8>)
 800066c:	2200      	movs	r2, #0
 800066e:	705a      	strb	r2, [r3, #1]
    currState[2] = BTN_RELEASE;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <traffic_init+0xb8>)
 8000672:	2200      	movs	r2, #0
 8000674:	709a      	strb	r2, [r3, #2]
	 *
	 * blink_counter: Đếm số lần gọi timer (mỗi 10ms)
	 *                50 lần = 500ms = 0.5 giây
	 * flag_blink: 0 = LED tắt, 1 = LED sáng
	 */
    blink_counter = 0;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <traffic_init+0xbc>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
    flag_blink = 0;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <traffic_init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
	 * - flagGreen[0], flagGreen[1]: Điều khiển LED xanh đường 1 và 2
	 * - flagYellow[0], flagYellow[1]: Điều khiển LED vàng đường 1 và 2
	 *
	 * Giá trị: 0 = tắt, 1 = sáng
	 */
    flagRed[0] = flagRed[1] = 0;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <traffic_init+0xc4>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <traffic_init+0xc4>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <traffic_init+0xc4>)
 800068e:	6013      	str	r3, [r2, #0]
    flagGreen[0] = flagGreen[1] = 0;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <traffic_init+0xc8>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <traffic_init+0xc8>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <traffic_init+0xc8>)
 800069c:	6013      	str	r3, [r2, #0]
    flagYellow[0] = flagYellow[1] = 0;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <traffic_init+0xcc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <traffic_init+0xcc>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <traffic_init+0xcc>)
 80006aa:	6013      	str	r3, [r2, #0]
	 * BƯỚC 8: RESET BIẾN TẠM
	 * ------------------------------------------------------------------------
	 * temp_duration: Lưu giá trị tạm thời trong chế độ điều chỉnh
	 *                Chỉ lưu vào duration_* khi nhấn nút SET
	 */
    temp_duration = 0;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <traffic_init+0xd0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000044 	.word	0x20000044
 80006bc:	20000048 	.word	0x20000048
 80006c0:	2000004c 	.word	0x2000004c
 80006c4:	20000050 	.word	0x20000050
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	200000a0 	.word	0x200000a0
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	200000cc 	.word	0x200000cc
 80006d8:	200000d0 	.word	0x200000d0
 80006dc:	200000ac 	.word	0x200000ac
 80006e0:	200000b0 	.word	0x200000b0
 80006e4:	200000b4 	.word	0x200000b4
 80006e8:	200000bc 	.word	0x200000bc
 80006ec:	200000c4 	.word	0x200000c4
 80006f0:	2000009c 	.word	0x2000009c

080006f4 <traffic_run>:
 *
 * ĐƯỢC GỌI: Trong timer interrupt handler, mỗi 10ms (tần suất 100Hz)
 * TẦN SUẤT: 100 lần/giây = 100Hz
 */
void traffic_run(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/* ------------------------------------------------------------------------
	 * BƯỚC 1: ĐỌC TRẠNG THÁI NÚT NHẤN
	 * ------------------------------------------------------------------------
	 */
	update_button_state();
 80006f8:	f000 faa8 	bl	8000c4c <update_button_state>
	 * Mỗi mode có một FSM riêng để xử lý logic:
	 *
	 * MODE 1: Tự động chuyển đèn, xử lý nút MODE để vào chế độ điều chỉnh
	 * MODE 2-4: Xử lý nút MODIFY (tăng giá trị), SET (lưu), MODE (chuyển mode)
	 */
    switch(current_mode) {
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <traffic_run+0x4c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	3b01      	subs	r3, #1
 8000702:	2b03      	cmp	r3, #3
 8000704:	d816      	bhi.n	8000734 <traffic_run+0x40>
 8000706:	a201      	add	r2, pc, #4	; (adr r2, 800070c <traffic_run+0x18>)
 8000708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070c:	0800071d 	.word	0x0800071d
 8000710:	08000723 	.word	0x08000723
 8000714:	08000729 	.word	0x08000729
 8000718:	0800072f 	.word	0x0800072f
        case MODE_1_NORMAL:
            fsm_normal_mode();    // Chế độ hoạt động tự động
 800071c:	f000 f812 	bl	8000744 <fsm_normal_mode>
            break;
 8000720:	e008      	b.n	8000734 <traffic_run+0x40>

        case MODE_2_RED_MODIFY:
            fsm_red_modify_mode();    // Điều chỉnh thời gian đèn đỏ
 8000722:	f000 f8e9 	bl	80008f8 <fsm_red_modify_mode>
            break;
 8000726:	e005      	b.n	8000734 <traffic_run+0x40>

        case MODE_3_AMBER_MODIFY:
            fsm_amber_modify_mode();  // Điều chỉnh thời gian đèn vàng
 8000728:	f000 f936 	bl	8000998 <fsm_amber_modify_mode>
            break;
 800072c:	e002      	b.n	8000734 <traffic_run+0x40>

        case MODE_4_GREEN_MODIFY:
            fsm_green_modify_mode();  // Điều chỉnh thời gian đèn xanh
 800072e:	f000 f983 	bl	8000a38 <fsm_green_modify_mode>
            break;
 8000732:	bf00      	nop
	 * Bật/tắt LED phần cứng dựa trên giá trị của các cờ:
	 * - flagRed[0], flagRed[1]
	 * - flagGreen[0], flagGreen[1]
	 * - flagYellow[0], flagYellow[1]
	 */
    update_led_display();
 8000734:	f000 fae8 	bl	8000d08 <update_led_display>
	 * ------------------------------------------------------------------------
	 * Hiển thị số trên LED 7 đoạn:
	 * - MODE 1: Hiển thị counter_road1, counter_road2 (đếm ngược)
	 * - MODE 2-4: Hiển thị temp_duration (giá trị đang điều chỉnh)
	 */
    update_7seg_display();
 8000738:	f7ff fd08 	bl	800014c <update_7seg_display>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000050 	.word	0x20000050

08000744 <fsm_normal_mode>:
 *   RED_GREEN (quay lại chu trình)
 *
 * THỜI GIAN CẬP NHẬT: 1 giây (đếm ngược mỗi giây)
 */
void fsm_normal_mode(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	 * 1. Chuyển sang MODE 2 (điều chỉnh đèn đỏ)
	 * 2. Load giá trị hiện tại vào temp_duration
	 * 3. Tắt tất cả LED (chuẩn bị hiệu ứng nhấp nháy)
	 * 4. return ngay để không xử lý logic đèn giao thông
	 */
    if(currState[0] == BTN_PRESS && prevState[0] == BTN_RELEASE) {
 8000748:	4b5f      	ldr	r3, [pc, #380]	; (80008c8 <fsm_normal_mode+0x184>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10d      	bne.n	800076c <fsm_normal_mode+0x28>
 8000750:	4b5e      	ldr	r3, [pc, #376]	; (80008cc <fsm_normal_mode+0x188>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d109      	bne.n	800076c <fsm_normal_mode+0x28>
        // Chuyển sang chế độ điều chỉnh đèn đỏ
        current_mode = MODE_2_RED_MODIFY;
 8000758:	4b5d      	ldr	r3, [pc, #372]	; (80008d0 <fsm_normal_mode+0x18c>)
 800075a:	2202      	movs	r2, #2
 800075c:	701a      	strb	r2, [r3, #0]

        // Load giá trị hiện tại để bắt đầu điều chỉnh
        temp_duration = duration_RED;
 800075e:	4b5d      	ldr	r3, [pc, #372]	; (80008d4 <fsm_normal_mode+0x190>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a5d      	ldr	r2, [pc, #372]	; (80008d8 <fsm_normal_mode+0x194>)
 8000764:	6013      	str	r3, [r2, #0]

        // Tắt tất cả LED trước khi vào chế độ mới
        turn_off_all_leds();
 8000766:	f000 fb4f 	bl	8000e08 <turn_off_all_leds>

        return;  // Thoát ngay, không xử lý phần còn lại
 800076a:	e0ac      	b.n	80008c6 <fsm_normal_mode+0x182>
	 * ĐẾM THỜI GIAN ĐỂ XÁC ĐỊNH ĐÃ ĐỦ 1 GIÂY CHƯA
	 * ------------------------------------------------------------------------
	 * Mỗi lần gọi traffic_run() (10ms) → tăng timer_counter
	 * Khi timer_counter = 100 → đã đủ 1 giây
	 */
    timer_counter++;
 800076c:	4b5b      	ldr	r3, [pc, #364]	; (80008dc <fsm_normal_mode+0x198>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	4a5a      	ldr	r2, [pc, #360]	; (80008dc <fsm_normal_mode+0x198>)
 8000774:	6013      	str	r3, [r2, #0]
    // Nếu chưa đủ 1 giây → thoát và chờ
    if(timer_counter < TIMER_CYCLE) {
 8000776:	4b59      	ldr	r3, [pc, #356]	; (80008dc <fsm_normal_mode+0x198>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b59      	ldr	r3, [pc, #356]	; (80008e0 <fsm_normal_mode+0x19c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	f2c0 80a0 	blt.w	80008c4 <fsm_normal_mode+0x180>
        return;  // Chưa đủ thời gian, không làm gì cả
    }
    /* ------------------------------------------------------------------------
	 * ĐÃ ĐỦ 1 GIÂY - RESET COUNTER VÀ XỬ LÝ FSM
	 * ------------------------------------------------------------------------ */
    timer_counter = 0;  // Reset để bắt đầu đếm chu kỳ mới
 8000784:	4b55      	ldr	r3, [pc, #340]	; (80008dc <fsm_normal_mode+0x198>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]


    /* ------------------------------------------------------------------------
	 * FSM ĐÈN GIAO THÔNG - CẬP NHẬT MỖI GIÂY
	 * ------------------------------------------------------------------------ */
    switch(traffic_state) {
 800078a:	4b56      	ldr	r3, [pc, #344]	; (80008e4 <fsm_normal_mode+0x1a0>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b04      	cmp	r3, #4
 8000790:	f200 8089 	bhi.w	80008a6 <fsm_normal_mode+0x162>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <fsm_normal_mode+0x58>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007b1 	.word	0x080007b1
 80007a0:	080007c9 	.word	0x080007c9
 80007a4:	080007fd 	.word	0x080007fd
 80007a8:	08000831 	.word	0x08000831
 80007ac:	08000865 	.word	0x08000865
         * - Chuyển sang trạng thái đầu tiên của chu trình (RED_GREEN)
         * - Khởi tạo counter cho 2 đường
         */
        case INIT:
            // Chuyển sang trạng thái đầu tiên
            traffic_state = RED_GREEN;
 80007b0:	4b4c      	ldr	r3, [pc, #304]	; (80008e4 <fsm_normal_mode+0x1a0>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]

            // Khởi tạo thời gian đếm ngược cho 2 đường
            counter_road1 = duration_RED;    // Đường 1: đèn đỏ
 80007b6:	4b47      	ldr	r3, [pc, #284]	; (80008d4 <fsm_normal_mode+0x190>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a4b      	ldr	r2, [pc, #300]	; (80008e8 <fsm_normal_mode+0x1a4>)
 80007bc:	6013      	str	r3, [r2, #0]
            counter_road2 = duration_GREEN;  // Đường 2: đèn xanh
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <fsm_normal_mode+0x1a8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a4b      	ldr	r2, [pc, #300]	; (80008f0 <fsm_normal_mode+0x1ac>)
 80007c4:	6013      	str	r3, [r2, #0]
            break;
 80007c6:	e06e      	b.n	80008a6 <fsm_normal_mode+0x162>
         * Đường 1: ĐÈN ĐỎ    (counter_road1 = duration_RED)
         * Đường 2: ĐÈN XANH  (counter_road2 = duration_GREEN)
         */
        case RED_GREEN:
            // Giảm cả 2 counter
            counter_road1--;  // Đếm ngược đèn đỏ đường 1
 80007c8:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <fsm_normal_mode+0x1a4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a46      	ldr	r2, [pc, #280]	; (80008e8 <fsm_normal_mode+0x1a4>)
 80007d0:	6013      	str	r3, [r2, #0]
            counter_road2--;  // Đếm ngược đèn xanh đường 2
 80007d2:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <fsm_normal_mode+0x1ac>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a45      	ldr	r2, [pc, #276]	; (80008f0 <fsm_normal_mode+0x1ac>)
 80007da:	6013      	str	r3, [r2, #0]

            // Kiểm tra điều kiện chuyển trạng thái
            if(counter_road2 <= 0) {
 80007dc:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <fsm_normal_mode+0x1ac>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dc59      	bgt.n	8000898 <fsm_normal_mode+0x154>
                // Đèn xanh đường 2 đã hết → chuyển sang đèn vàng
                traffic_state = RED_AMBER;
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <fsm_normal_mode+0x1a0>)
 80007e6:	2202      	movs	r2, #2
 80007e8:	701a      	strb	r2, [r3, #0]

                // Cập nhật counter cho trạng thái mới
                counter_road1 = duration_AMBER;  // Đường 1 còn thời gian đèn vàng
 80007ea:	4b42      	ldr	r3, [pc, #264]	; (80008f4 <fsm_normal_mode+0x1b0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <fsm_normal_mode+0x1a4>)
 80007f0:	6013      	str	r3, [r2, #0]
                counter_road2 = duration_AMBER;  // Đường 2 bắt đầu đèn vàng
 80007f2:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <fsm_normal_mode+0x1b0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a3e      	ldr	r2, [pc, #248]	; (80008f0 <fsm_normal_mode+0x1ac>)
 80007f8:	6013      	str	r3, [r2, #0]
            }
            break;
 80007fa:	e04d      	b.n	8000898 <fsm_normal_mode+0x154>
         * ====================================================================
         * Đường 1: ĐÈN ĐỎ    (counter_road1 = duration_AMBER còn lại)
         * Đường 2: ĐÈN VÀNG  (counter_road2 = duration_AMBER)
         */
        case RED_AMBER:
            counter_road1--;
 80007fc:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <fsm_normal_mode+0x1a4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3b01      	subs	r3, #1
 8000802:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <fsm_normal_mode+0x1a4>)
 8000804:	6013      	str	r3, [r2, #0]
            counter_road2--;
 8000806:	4b3a      	ldr	r3, [pc, #232]	; (80008f0 <fsm_normal_mode+0x1ac>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3b01      	subs	r3, #1
 800080c:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <fsm_normal_mode+0x1ac>)
 800080e:	6013      	str	r3, [r2, #0]

            // Khi đèn vàng đường 2 hết → đổi lượt
            if(counter_road2 <= 0) {
 8000810:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <fsm_normal_mode+0x1ac>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	dc41      	bgt.n	800089c <fsm_normal_mode+0x158>
                traffic_state = GREEN_RED;
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <fsm_normal_mode+0x1a0>)
 800081a:	2203      	movs	r2, #3
 800081c:	701a      	strb	r2, [r3, #0]

                // Đường 1 được đi (đèn xanh), đường 2 dừng (đèn đỏ)
                counter_road1 = duration_GREEN;  // Đường 1: đèn xanh
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <fsm_normal_mode+0x1a8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a31      	ldr	r2, [pc, #196]	; (80008e8 <fsm_normal_mode+0x1a4>)
 8000824:	6013      	str	r3, [r2, #0]
                counter_road2 = duration_RED;    // Đường 2: đèn đỏ
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <fsm_normal_mode+0x190>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a31      	ldr	r2, [pc, #196]	; (80008f0 <fsm_normal_mode+0x1ac>)
 800082c:	6013      	str	r3, [r2, #0]
            }
            break;
 800082e:	e035      	b.n	800089c <fsm_normal_mode+0x158>
        /* ====================================================================
         * TRẠNG THÁI GREEN_RED
         * ====================================================================
         */
        case GREEN_RED:
            counter_road1--;
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <fsm_normal_mode+0x1a4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3b01      	subs	r3, #1
 8000836:	4a2c      	ldr	r2, [pc, #176]	; (80008e8 <fsm_normal_mode+0x1a4>)
 8000838:	6013      	str	r3, [r2, #0]
            counter_road2--;
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <fsm_normal_mode+0x1ac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	3b01      	subs	r3, #1
 8000840:	4a2b      	ldr	r2, [pc, #172]	; (80008f0 <fsm_normal_mode+0x1ac>)
 8000842:	6013      	str	r3, [r2, #0]

            // Khi đèn xanh đường 1 hết → chuyển sang đèn vàng
            if(counter_road1 <= 0) {
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <fsm_normal_mode+0x1a4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	dc29      	bgt.n	80008a0 <fsm_normal_mode+0x15c>
                traffic_state = AMBER_RED;
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <fsm_normal_mode+0x1a0>)
 800084e:	2204      	movs	r2, #4
 8000850:	701a      	strb	r2, [r3, #0]

                counter_road1 = duration_AMBER;  // Đường 1: đèn vàng
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <fsm_normal_mode+0x1b0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <fsm_normal_mode+0x1a4>)
 8000858:	6013      	str	r3, [r2, #0]
                counter_road2 = duration_AMBER;  // Đường 2 còn thời gian đèn đỏ
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <fsm_normal_mode+0x1b0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <fsm_normal_mode+0x1ac>)
 8000860:	6013      	str	r3, [r2, #0]
            }
            break;
 8000862:	e01d      	b.n	80008a0 <fsm_normal_mode+0x15c>
         * ====================================================================
         * Đường 1: ĐÈN VÀNG  (counter_road1 = duration_AMBER)
         * Đường 2: ĐÈN ĐỎ    (counter_road2 = duration_AMBER còn lại)
         */
        case AMBER_RED:
            counter_road1--;
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <fsm_normal_mode+0x1a4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3b01      	subs	r3, #1
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <fsm_normal_mode+0x1a4>)
 800086c:	6013      	str	r3, [r2, #0]
            counter_road2--;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <fsm_normal_mode+0x1ac>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <fsm_normal_mode+0x1ac>)
 8000876:	6013      	str	r3, [r2, #0]

            // Khi đèn vàng đường 1 hết → quay lại chu trình ban đầu
            if(counter_road2 <= 0) {
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <fsm_normal_mode+0x1ac>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	dc11      	bgt.n	80008a4 <fsm_normal_mode+0x160>
                traffic_state = RED_GREEN;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <fsm_normal_mode+0x1a0>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]

                // Bắt đầu lại từ đầu
                counter_road1 = duration_RED;    // Đường 1: đèn đỏ
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <fsm_normal_mode+0x190>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <fsm_normal_mode+0x1a4>)
 800088c:	6013      	str	r3, [r2, #0]
                counter_road2 = duration_GREEN;  // Đường 2: đèn xanh
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <fsm_normal_mode+0x1a8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <fsm_normal_mode+0x1ac>)
 8000894:	6013      	str	r3, [r2, #0]
            }
            break;
 8000896:	e005      	b.n	80008a4 <fsm_normal_mode+0x160>
            break;
 8000898:	bf00      	nop
 800089a:	e004      	b.n	80008a6 <fsm_normal_mode+0x162>
            break;
 800089c:	bf00      	nop
 800089e:	e002      	b.n	80008a6 <fsm_normal_mode+0x162>
            break;
 80008a0:	bf00      	nop
 80008a2:	e000      	b.n	80008a6 <fsm_normal_mode+0x162>
            break;
 80008a4:	bf00      	nop
	 *
	 * Đảm bảo counter >= 0 để:
	 * - LED 7 đoạn hiển thị đúng (không hiện số âm)
	 * - Tránh lỗi hiển thị kỳ lạ
	 */
    if(counter_road1 < 0) counter_road1 = 0;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <fsm_normal_mode+0x1a4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da02      	bge.n	80008b4 <fsm_normal_mode+0x170>
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <fsm_normal_mode+0x1a4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
    if(counter_road2 < 0) counter_road2 = 0;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <fsm_normal_mode+0x1ac>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	da04      	bge.n	80008c6 <fsm_normal_mode+0x182>
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <fsm_normal_mode+0x1ac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e000      	b.n	80008c6 <fsm_normal_mode+0x182>
        return;  // Chưa đủ thời gian, không làm gì cả
 80008c4:	bf00      	nop
}
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000d0 	.word	0x200000d0
 80008cc:	200000cc 	.word	0x200000cc
 80008d0:	20000050 	.word	0x20000050
 80008d4:	20000044 	.word	0x20000044
 80008d8:	2000009c 	.word	0x2000009c
 80008dc:	20000098 	.word	0x20000098
 80008e0:	20000040 	.word	0x20000040
 80008e4:	200000a8 	.word	0x200000a8
 80008e8:	200000a0 	.word	0x200000a0
 80008ec:	2000004c 	.word	0x2000004c
 80008f0:	200000a4 	.word	0x200000a4
 80008f4:	20000048 	.word	0x20000048

080008f8 <fsm_red_modify_mode>:
 * - Tự động tính: duration_GREEN = duration_RED - duration_AMBER
 * - Nếu không hợp lệ → Reset về mặc định
 * - Quay về MODE 1
 */
void fsm_red_modify_mode(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    /* ------------------------------------------------------------------------
	 * XỬ LÝ NÚT MODE - CHUYỂN SANG MODE 3 (ĐIỀU CHỈNH ĐÈN VÀNG)
	 * ------------------------------------------------------------------------
	 */
    if(currState[0] == BTN_PRESS && prevState[0] == BTN_RELEASE) {
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <fsm_red_modify_mode+0x84>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d10b      	bne.n	800091c <fsm_red_modify_mode+0x24>
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <fsm_red_modify_mode+0x88>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d107      	bne.n	800091c <fsm_red_modify_mode+0x24>
        // Chuyển sang chế độ điều chỉnh đèn vàng
        current_mode = MODE_3_AMBER_MODIFY;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <fsm_red_modify_mode+0x8c>)
 800090e:	2203      	movs	r2, #3
 8000910:	701a      	strb	r2, [r3, #0]

        // Load giá trị đèn vàng hiện tại
        temp_duration = duration_AMBER;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <fsm_red_modify_mode+0x90>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <fsm_red_modify_mode+0x94>)
 8000918:	6013      	str	r3, [r2, #0]

        return;  // Thoát ngay
 800091a:	e02e      	b.n	800097a <fsm_red_modify_mode+0x82>
	 * XỬ LÝ NÚT MODIFY/INC - TĂNG GIÁ TRỊ THỜI GIAN
	 * ------------------------------------------------------------------------
	 * Edge detection đảm bảo:
	 * - Nhấn 1 lần = tăng 1 lần (không bị tăng liên tục khi giữ nút)
	 */
    if(currState[1] == BTN_PRESS && prevState[1] == BTN_RELEASE) {
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <fsm_red_modify_mode+0x84>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10f      	bne.n	8000944 <fsm_red_modify_mode+0x4c>
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <fsm_red_modify_mode+0x88>)
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10b      	bne.n	8000944 <fsm_red_modify_mode+0x4c>
        temp_duration++;  // Tăng giá trị
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <fsm_red_modify_mode+0x94>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <fsm_red_modify_mode+0x94>)
 8000934:	6013      	str	r3, [r2, #0]
        // Kiểm tra vượt giới hạn → quay về 1
        if(temp_duration > 99) {
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <fsm_red_modify_mode+0x94>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b63      	cmp	r3, #99	; 0x63
 800093c:	dd02      	ble.n	8000944 <fsm_red_modify_mode+0x4c>
            temp_duration = 1;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <fsm_red_modify_mode+0x94>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
	 *
	 * BƯỚC 3: Quay về MODE 1 (hoạt động bình thường)
	 *         - Reset traffic_state = INIT
	 *         - Tắt tất cả LED (chuẩn bị cho chu trình mới)
	 */
    if(currState[2] == BTN_PRESS && prevState[2] == BTN_RELEASE) {
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <fsm_red_modify_mode+0x84>)
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d113      	bne.n	8000974 <fsm_red_modify_mode+0x7c>
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <fsm_red_modify_mode+0x88>)
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10f      	bne.n	8000974 <fsm_red_modify_mode+0x7c>
        // ===== BƯỚC 1: LƯU GIÁ TRỊ ĐÈN ĐỎ MỚI =====
        duration_RED = temp_duration;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <fsm_red_modify_mode+0x94>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <fsm_red_modify_mode+0x98>)
 800095a:	6013      	str	r3, [r2, #0]

        // ===== BƯỚC 2: TỰ ĐỘNG ĐIỀU CHỈNH 2 ĐÈN CÒN LẠI =====
        // Gọi hàm auto_adjust_duration() với tham số 0 (đã chỉnh đèn ĐỎ)
        // Hàm sẽ tự động tính toán GREEN và AMBER để thỏa mãn:
        // RED = GREEN + AMBER
        auto_adjust_duration(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 f8bb 	bl	8000ad8 <auto_adjust_duration>

        // ===== BƯỚC 3: QUAY VỀ MODE 1 =====
        current_mode = MODE_1_NORMAL;    // Chuyển về chế độ tự động
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <fsm_red_modify_mode+0x8c>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
        traffic_state = INIT;             // Reset trạng thái (sẽ khởi tạo lại counter)
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <fsm_red_modify_mode+0x9c>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
        turn_off_all_leds();              // Tắt LED trước khi bắt đầu chu trình mới
 800096e:	f000 fa4b 	bl	8000e08 <turn_off_all_leds>

        return;  // Thoát ngay
 8000972:	e002      	b.n	800097a <fsm_red_modify_mode+0x82>
	 * HIỆU ỨNG NHẤP NHÁY LED ĐỎ
	 * ------------------------------------------------------------------------
	 * Gọi hàm handle_led_blinking() với tham số 2 (đèn đỏ)
	 * Kết quả: LED đỏ nhấp nháy với chu kỳ 1 giây (0.5s sáng + 0.5s tắt)
	 */
    handle_led_blinking(0);  // 2 = RED LED
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fb41 	bl	8000ffc <handle_led_blinking>
}
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000d0 	.word	0x200000d0
 8000980:	200000cc 	.word	0x200000cc
 8000984:	20000050 	.word	0x20000050
 8000988:	20000048 	.word	0x20000048
 800098c:	2000009c 	.word	0x2000009c
 8000990:	20000044 	.word	0x20000044
 8000994:	200000a8 	.word	0x200000a8

08000998 <fsm_amber_modify_mode>:
 * - Tự động tính: duration_RED = duration_GREEN + duration_AMBER (mới)
 * - Giữ nguyên duration_GREEN
 * - Nếu RED > 99 → điều chỉnh GREEN
 */
void fsm_amber_modify_mode(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    /* ------------------------------------------------------------------------
	 * XỬ LÝ NÚT MODE - CHUYỂN SANG MODE 4 (ĐIỀU CHỈNH ĐÈN XANH)
	 * ------------------------------------------------------------------------ */
    if(currState[0] == BTN_PRESS && prevState[0] == BTN_RELEASE) {
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <fsm_amber_modify_mode+0x84>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10b      	bne.n	80009bc <fsm_amber_modify_mode+0x24>
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <fsm_amber_modify_mode+0x88>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d107      	bne.n	80009bc <fsm_amber_modify_mode+0x24>
        current_mode = MODE_4_GREEN_MODIFY;  // Chuyển sang điều chỉnh đèn xanh
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <fsm_amber_modify_mode+0x8c>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	701a      	strb	r2, [r3, #0]
        temp_duration = duration_GREEN;       // Load giá trị đèn xanh hiện tại
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <fsm_amber_modify_mode+0x90>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1d      	ldr	r2, [pc, #116]	; (8000a2c <fsm_amber_modify_mode+0x94>)
 80009b8:	6013      	str	r3, [r2, #0]
        return;
 80009ba:	e02e      	b.n	8000a1a <fsm_amber_modify_mode+0x82>
    /* ------------------------------------------------------------------------
	 * XỬ LÝ NÚT MODIFY - TĂNG GIÁ TRỊ
	 * ------------------------------------------------------------------------
	 * Tăng từ 1 → 99, sau đó quay về 1
	 */
    if(currState[1] == BTN_PRESS && prevState[1] == BTN_RELEASE) {
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <fsm_amber_modify_mode+0x84>)
 80009be:	785b      	ldrb	r3, [r3, #1]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10f      	bne.n	80009e4 <fsm_amber_modify_mode+0x4c>
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <fsm_amber_modify_mode+0x88>)
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10b      	bne.n	80009e4 <fsm_amber_modify_mode+0x4c>
        temp_duration++;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <fsm_amber_modify_mode+0x94>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <fsm_amber_modify_mode+0x94>)
 80009d4:	6013      	str	r3, [r2, #0]
        if(temp_duration > 99) temp_duration = 1;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <fsm_amber_modify_mode+0x94>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b63      	cmp	r3, #99	; 0x63
 80009dc:	dd02      	ble.n	80009e4 <fsm_amber_modify_mode+0x4c>
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <fsm_amber_modify_mode+0x94>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
	 * Quy trình:
	 * 1. Lưu duration_AMBER = temp_duration
	 * 2. Tự động điều chỉnh: duration_RED = duration_GREEN + duration_AMBER
	 * 3. Quay về MODE 1
	 */
    if(currState[2] == BTN_PRESS && prevState[2] == BTN_RELEASE) {
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <fsm_amber_modify_mode+0x84>)
 80009e6:	789b      	ldrb	r3, [r3, #2]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d113      	bne.n	8000a14 <fsm_amber_modify_mode+0x7c>
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <fsm_amber_modify_mode+0x88>)
 80009ee:	789b      	ldrb	r3, [r3, #2]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10f      	bne.n	8000a14 <fsm_amber_modify_mode+0x7c>
        // BƯỚC 1: Lưu giá trị đèn vàng mới
        duration_AMBER = temp_duration;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <fsm_amber_modify_mode+0x94>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <fsm_amber_modify_mode+0x98>)
 80009fa:	6013      	str	r3, [r2, #0]

        // BƯỚC 2: Tự động điều chỉnh
        // Tham số 1 = vừa chỉnh đèn VÀNG
        // Chiến lược: Giữ GREEN, tính RED = GREEN + AMBER (mới)
        // VD: GREEN=5, AMBER(mới)=3 → RED=8
        auto_adjust_duration(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 f86b 	bl	8000ad8 <auto_adjust_duration>

        // BƯỚC 3: Quay về MODE 1
        current_mode = MODE_1_NORMAL;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <fsm_amber_modify_mode+0x8c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
        traffic_state = INIT;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <fsm_amber_modify_mode+0x9c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
        turn_off_all_leds();
 8000a0e:	f000 f9fb 	bl	8000e08 <turn_off_all_leds>
        return;
 8000a12:	e002      	b.n	8000a1a <fsm_amber_modify_mode+0x82>
    /* ------------------------------------------------------------------------
	 * HIỆU ỨNG NHẤP NHÁY LED VÀNG
	 * ------------------------------------------------------------------------
	 * Tham số 1 = AMBER/YELLOW LED
	 */
    handle_led_blinking(1);  // 1 = AMBER/YELLOW LED
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 faf1 	bl	8000ffc <handle_led_blinking>
}
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000d0 	.word	0x200000d0
 8000a20:	200000cc 	.word	0x200000cc
 8000a24:	20000050 	.word	0x20000050
 8000a28:	2000004c 	.word	0x2000004c
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	20000048 	.word	0x20000048
 8000a34:	200000a8 	.word	0x200000a8

08000a38 <fsm_green_modify_mode>:
 * - Tự động tính: duration_RED = duration_GREEN (mới) + duration_AMBER
 * - Giữ nguyên duration_AMBER
 * - Nếu RED > 99 → điều chỉnh AMBER
 */
void fsm_green_modify_mode(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	 * ------------------------------------------------------------------------
	 * Đây là mode cuối cùng trong chuỗi điều chỉnh
	 * Nếu nhấn MODE → Quay về chế độ tự động mà KHÔNG lưu giá trị
	 * (Khác với MODE 2 và MODE 3 chuyển sang mode kế tiếp)
	 */
    if(currState[0] == BTN_PRESS && prevState[0] == BTN_RELEASE) {
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <fsm_green_modify_mode+0x88>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10c      	bne.n	8000a5e <fsm_green_modify_mode+0x26>
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <fsm_green_modify_mode+0x8c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d108      	bne.n	8000a5e <fsm_green_modify_mode+0x26>
        current_mode = MODE_1_NORMAL;  // Quay về chế độ tự động
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <fsm_green_modify_mode+0x90>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
        traffic_state = INIT;           // Reset trạng thái
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <fsm_green_modify_mode+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
        turn_off_all_leds();            // Tắt LED
 8000a58:	f000 f9d6 	bl	8000e08 <turn_off_all_leds>
        return;
 8000a5c:	e02e      	b.n	8000abc <fsm_green_modify_mode+0x84>
    }

    /* ------------------------------------------------------------------------
	 * XỬ LÝ NÚT MODIFY - TĂNG GIÁ TRỊ
	 * ------------------------------------------------------------------------ */
    if(currState[1] == BTN_PRESS && prevState[1] == BTN_RELEASE) {
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <fsm_green_modify_mode+0x88>)
 8000a60:	785b      	ldrb	r3, [r3, #1]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10f      	bne.n	8000a86 <fsm_green_modify_mode+0x4e>
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <fsm_green_modify_mode+0x8c>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10b      	bne.n	8000a86 <fsm_green_modify_mode+0x4e>
        temp_duration++;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <fsm_green_modify_mode+0x98>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <fsm_green_modify_mode+0x98>)
 8000a76:	6013      	str	r3, [r2, #0]
        if(temp_duration > 99) temp_duration = 1;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <fsm_green_modify_mode+0x98>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b63      	cmp	r3, #99	; 0x63
 8000a7e:	dd02      	ble.n	8000a86 <fsm_green_modify_mode+0x4e>
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <fsm_green_modify_mode+0x98>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
	 * Quy trình:
	 * 1. Lưu duration_GREEN = temp_duration
	 * 2. Tự động điều chỉnh: duration_RED = duration_GREEN + duration_AMBER
	 * 3. Quay về MODE 1
	 */
    if(currState[2] == BTN_PRESS && prevState[2] == BTN_RELEASE) {
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <fsm_green_modify_mode+0x88>)
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d113      	bne.n	8000ab6 <fsm_green_modify_mode+0x7e>
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <fsm_green_modify_mode+0x8c>)
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10f      	bne.n	8000ab6 <fsm_green_modify_mode+0x7e>
        // BƯỚC 1: Lưu giá trị đèn xanh mới
        duration_GREEN = temp_duration;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <fsm_green_modify_mode+0x98>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <fsm_green_modify_mode+0x9c>)
 8000a9c:	6013      	str	r3, [r2, #0]

        // BƯỚC 2: Tự động điều chỉnh
        // Tham số 2 = vừa chỉnh đèn XANH
        // Chiến lược: Giữ AMBER, tính RED = GREEN (mới) + AMBER
        // VD: GREEN(mới)=7, AMBER=2 → RED=9
        auto_adjust_duration(2);
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f000 f81a 	bl	8000ad8 <auto_adjust_duration>

        // BƯỚC 3: Quay về MODE 1
        current_mode = MODE_1_NORMAL;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <fsm_green_modify_mode+0x90>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
        traffic_state = INIT;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <fsm_green_modify_mode+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
        turn_off_all_leds();
 8000ab0:	f000 f9aa 	bl	8000e08 <turn_off_all_leds>
        return;
 8000ab4:	e002      	b.n	8000abc <fsm_green_modify_mode+0x84>
    /* ------------------------------------------------------------------------
	 * HIỆU ỨNG NHẤP NHÁY LED XANH
	 * ------------------------------------------------------------------------
	 * Tham số 0 = GREEN LED
	 */
    handle_led_blinking(2);  // 0 = GREEN LED
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	f000 faa0 	bl	8000ffc <handle_led_blinking>
}
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000d0 	.word	0x200000d0
 8000ac4:	200000cc 	.word	0x200000cc
 8000ac8:	20000050 	.word	0x20000050
 8000acc:	200000a8 	.word	0x200000a8
 8000ad0:	2000009c 	.word	0x2000009c
 8000ad4:	2000004c 	.word	0x2000004c

08000ad8 <auto_adjust_duration>:
 *   0: Không cần điều chỉnh (đã đúng ràng buộc)
 *
 * GIÁ TRỊ MẶC ĐỊNH KHI RESET: RED=5, GREEN=3, AMBER=2
 */
int auto_adjust_duration(int modified_light)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	 * KIỂM TRA RÀNG BUỘC - NẾU ĐÃ ĐÚNG THÌ KHÔNG CẦN ĐIỀU CHỈNH
	 * ------------------------------------------------------------------------
	 * Trước khi làm bất cứ điều gì, kiểm tra xem ràng buộc có đang
	 * thỏa mãn hay không. Nếu đã đúng → return 0 (không làm gì)
	 */
    if(duration_RED == (duration_GREEN + duration_AMBER)) {
 8000ae0:	4b57      	ldr	r3, [pc, #348]	; (8000c40 <auto_adjust_duration+0x168>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b57      	ldr	r3, [pc, #348]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	441a      	add	r2, r3
 8000aea:	4b57      	ldr	r3, [pc, #348]	; (8000c48 <auto_adjust_duration+0x170>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d101      	bne.n	8000af6 <auto_adjust_duration+0x1e>
        return 0;  // Đã đúng ràng buộc, không cần điều chỉnh
 8000af2:	2300      	movs	r3, #0
 8000af4:	e09e      	b.n	8000c34 <auto_adjust_duration+0x15c>
    }

    /* ------------------------------------------------------------------------
	 * XỬ LÝ THEO LOẠI ĐÈN VỪA ĐƯỢC ĐIỀU CHỈNH
	 * ------------------------------------------------------------------------ */
    switch(modified_light) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d073      	beq.n	8000be4 <auto_adjust_duration+0x10c>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	f300 8097 	bgt.w	8000c32 <auto_adjust_duration+0x15a>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <auto_adjust_duration+0x3a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d02f      	beq.n	8000b70 <auto_adjust_duration+0x98>
 8000b10:	e08f      	b.n	8000c32 <auto_adjust_duration+0x15a>
			 *
			 * Ví dụ 2 (thất bại - GREEN âm):
			 *   RED=3, AMBER=5 → GREEN=-2 ✗
			 *   → Phải thử cách khác
			 */
            duration_GREEN = duration_RED - duration_AMBER;
 8000b12:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <auto_adjust_duration+0x170>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b4b      	ldr	r3, [pc, #300]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	4a48      	ldr	r2, [pc, #288]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b1e:	6013      	str	r3, [r2, #0]
            /* ----------------------------------------------------------------
			 * KIỂM TRA TÍNH HỢP LỆ CỦA GREEN
			 * ----------------------------------------------------------------
			 * Điều kiện hợp lệ: 1 ≤ GREEN ≤ 99
			 */
            if(duration_GREEN < 1 || duration_GREEN > 99) {
 8000b20:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	dd03      	ble.n	8000b30 <auto_adjust_duration+0x58>
 8000b28:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b63      	cmp	r3, #99	; 0x63
 8000b2e:	dd7b      	ble.n	8000c28 <auto_adjust_duration+0x150>
				 * Công thức: AMBER = RED - GREEN
				 *
				 * LƯU Ý: Dòng này có vẻ dư thừa vì GREEN vừa được tính
				 * nhưng nó đảm bảo logic rõ ràng
				 */
                duration_GREEN = duration_RED - duration_AMBER;  // Khôi phục giá trị
 8000b30:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <auto_adjust_duration+0x170>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	4a41      	ldr	r2, [pc, #260]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b3c:	6013      	str	r3, [r2, #0]
                duration_AMBER = duration_RED - duration_GREEN;
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <auto_adjust_duration+0x170>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	4a3e      	ldr	r2, [pc, #248]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b4a:	6013      	str	r3, [r2, #0]

                /* ------------------------------------------------------------
				 * KIỂM TRA AMBER MỚI
				 * ------------------------------------------------------------ */
                if(duration_AMBER < 1 || duration_AMBER > 99) {
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dd03      	ble.n	8000b5c <auto_adjust_duration+0x84>
 8000b54:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b63      	cmp	r3, #99	; 0x63
 8000b5a:	dd65      	ble.n	8000c28 <auto_adjust_duration+0x150>
					 * CẢ 2 CÁCH ĐỀU THẤT BẠI - RESET VỀ MẶC ĐỊNH
					 * --------------------------------------------------------
					 * Không thể tìm được cấu hình hợp lệ
					 * → Quay về giá trị an toàn
					 */
                    duration_RED = 5;
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <auto_adjust_duration+0x170>)
 8000b5e:	2205      	movs	r2, #5
 8000b60:	601a      	str	r2, [r3, #0]
                    duration_GREEN = 3;
 8000b62:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b64:	2203      	movs	r2, #3
 8000b66:	601a      	str	r2, [r3, #0]
                    duration_AMBER = 2;
 8000b68:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 8000b6e:	e05b      	b.n	8000c28 <auto_adjust_duration+0x150>
                 *   → GREEN = 30 + 3 = 33
                 *   → RED = 33 + 30 = 63 ✓
                 */

                // Tính GREEN theo công thức mới
                duration_GREEN = duration_AMBER + 4;
 8000b70:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3304      	adds	r3, #4
 8000b76:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b78:	6013      	str	r3, [r2, #0]

                // Tính RED
                duration_RED = duration_GREEN + duration_AMBER;
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <auto_adjust_duration+0x170>)
 8000b86:	6013      	str	r3, [r2, #0]
                /* ----------------------------------------------------------------
                 * KIỂM TRA TÍNH HỢP LỆ
                 * ---------------------------------------------------------------- */

                // Kiểm tra RED có vượt giới hạn không
                if(duration_RED > 99) {
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <auto_adjust_duration+0x170>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b63      	cmp	r3, #99	; 0x63
 8000b8e:	dd17      	ble.n	8000bc0 <auto_adjust_duration+0xe8>
                     * Từ công thức: RED = 2×AMBER + 3
                     * Để RED = 99: AMBER = (99 - 3) / 2 = 48
                     *
                     * Giới hạn: AMBER tối đa = 48 để RED không vượt 99
                     */
                    duration_AMBER = (99 - 3) / 2;  // = 48
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b92:	2230      	movs	r2, #48	; 0x30
 8000b94:	601a      	str	r2, [r3, #0]
                    duration_GREEN = duration_AMBER + 3;  // = 51
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3303      	adds	r3, #3
 8000b9c:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <auto_adjust_duration+0x168>)
 8000b9e:	6013      	str	r3, [r2, #0]
                    duration_RED = 99;
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <auto_adjust_duration+0x170>)
 8000ba2:	2263      	movs	r2, #99	; 0x63
 8000ba4:	601a      	str	r2, [r3, #0]

                    // Kiểm tra AMBER có hợp lệ không
                    if(duration_AMBER < 1) {
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	dc08      	bgt.n	8000bc0 <auto_adjust_duration+0xe8>
                        // AMBER < 1 → Reset về mặc định
                        duration_RED = 5;
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <auto_adjust_duration+0x170>)
 8000bb0:	2205      	movs	r2, #5
 8000bb2:	601a      	str	r2, [r3, #0]
                        duration_GREEN = 3;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <auto_adjust_duration+0x168>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	601a      	str	r2, [r3, #0]
                        duration_AMBER = 2;
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	601a      	str	r2, [r3, #0]
                    }
                }

                // Kiểm tra GREEN có hợp lệ không (phòng trường hợp AMBER = 0 hoặc âm)
                if(duration_GREEN < 1 || duration_GREEN > 99) {
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <auto_adjust_duration+0x168>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dd03      	ble.n	8000bd0 <auto_adjust_duration+0xf8>
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <auto_adjust_duration+0x168>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b63      	cmp	r3, #99	; 0x63
 8000bce:	dd2d      	ble.n	8000c2c <auto_adjust_duration+0x154>
                    // GREEN không hợp lệ → Reset
                    duration_RED = 5;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <auto_adjust_duration+0x170>)
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	601a      	str	r2, [r3, #0]
                    duration_GREEN = 3;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <auto_adjust_duration+0x168>)
 8000bd8:	2203      	movs	r2, #3
 8000bda:	601a      	str	r2, [r3, #0]
                    duration_AMBER = 2;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
                }
                break;
 8000be2:	e023      	b.n	8000c2c <auto_adjust_duration+0x154>
			 *   GREEN(mới)=7, AMBER=2 → RED=9 ✓
			 *
			 * Ví dụ 2 (vượt giới hạn):
			 *   GREEN(mới)=80, AMBER=30 → RED=110 ✗ (>99)
			 */
            duration_RED = duration_GREEN + duration_AMBER;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <auto_adjust_duration+0x168>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <auto_adjust_duration+0x170>)
 8000bf0:	6013      	str	r3, [r2, #0]

            /* ----------------------------------------------------------------
			 * KIỂM TRA RED CÓ VƯỢT GIỚI HẠN KHÔNG
			 * ---------------------------------------------------------------- */
            if(duration_RED > 99) {
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <auto_adjust_duration+0x170>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b63      	cmp	r3, #99	; 0x63
 8000bf8:	dd1a      	ble.n	8000c30 <auto_adjust_duration+0x158>
				 * Công thức: AMBER = 99 - GREEN
				 *
				 * Ví dụ:
				 *   GREEN=80 → AMBER=19, RED=99 ✓
				 */
                duration_AMBER = 99 - duration_GREEN;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <auto_adjust_duration+0x168>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000c04:	6013      	str	r3, [r2, #0]
                duration_RED = 99;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <auto_adjust_duration+0x170>)
 8000c08:	2263      	movs	r2, #99	; 0x63
 8000c0a:	601a      	str	r2, [r3, #0]

                /* ------------------------------------------------------------
				 * KIỂM TRA AMBER MỚI
				 * ------------------------------------------------------------ */
                if(duration_AMBER < 1) {
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dc0d      	bgt.n	8000c30 <auto_adjust_duration+0x158>
                    /* --------------------------------------------------------
					 * KHÔNG THỂ ĐIỀU CHỈNH - RESET
					 * --------------------------------------------------------
					 * Ví dụ gây lỗi: GREEN=99 → AMBER=0 ✗
					 */
                    duration_RED = 5;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <auto_adjust_duration+0x170>)
 8000c16:	2205      	movs	r2, #5
 8000c18:	601a      	str	r2, [r3, #0]
                    duration_GREEN = 3;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <auto_adjust_duration+0x168>)
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	601a      	str	r2, [r3, #0]
                    duration_AMBER = 2;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <auto_adjust_duration+0x16c>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 8000c26:	e003      	b.n	8000c30 <auto_adjust_duration+0x158>
            break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <auto_adjust_duration+0x15a>
                break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <auto_adjust_duration+0x15a>
            break;
 8000c30:	bf00      	nop
    }

    return 1;  // Đã thực hiện điều chỉnh hoặc reset
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	2000004c 	.word	0x2000004c
 8000c44:	20000048 	.word	0x20000048
 8000c48:	20000044 	.word	0x20000044

08000c4c <update_button_state>:
 *   Index 0: Button 1 (MODE)
 *   Index 1: Button 2 (MODIFY/INC)
 *   Index 2: Button 3 (SET)
 */
void update_button_state(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
	 * ------------------------------------------------------------------------
	 * i = 0: Nút MODE (Button 1)
	 * i = 1: Nút MODIFY/INC (Button 2)
	 * i = 2: Nút SET (Button 3)
	 */
    for(int i = 0; i < 3; i++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	e04b      	b.n	8000cf0 <update_button_state+0xa4>
		 *
		 * Ví dụ:
		 *   Lần trước: prevState[0]=RELEASE, currState[0]=RELEASE
		 *   Lần này: prevState[0]=RELEASE (copy từ currState cũ)
		 */
        prevState[i] = currState[i];
 8000c58:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <update_button_state+0xb4>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	7819      	ldrb	r1, [r3, #0]
 8000c60:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <update_button_state+0xb8>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	460a      	mov	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
		 *
		 * Trả về:
		 *   1 (true): Nút đang được nhấn
		 *   0 (false): Nút không được nhấn
		 */
        switch(i) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d02b      	beq.n	8000cc8 <update_button_state+0x7c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dc39      	bgt.n	8000cea <update_button_state+0x9e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <update_button_state+0x38>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d011      	beq.n	8000ca6 <update_button_state+0x5a>
 8000c82:	e032      	b.n	8000cea <update_button_state+0x9e>
            /* ----------------------------------------------------------------
			 * NÚT 1: MODE (Chuyển đổi chế độ)
			 * ---------------------------------------------------------------- */
            case 0:
                if(isButton1Pressed()) {
 8000c84:	f7ff fbc4 	bl	8000410 <isButton1Pressed>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <update_button_state+0x4e>
                    currState[i] = BTN_PRESS;    // Nút đang nhấn
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <update_button_state+0xb4>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
                } else {
                    currState[i] = BTN_RELEASE;  // Nút không nhấn
                }
                break;
 8000c98:	e027      	b.n	8000cea <update_button_state+0x9e>
                    currState[i] = BTN_RELEASE;  // Nút không nhấn
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <update_button_state+0xb4>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
                break;
 8000ca4:	e021      	b.n	8000cea <update_button_state+0x9e>

            /* ----------------------------------------------------------------
			 * NÚT 2: MODIFY/INC (Tăng giá trị)
			 * ---------------------------------------------------------------- */
            case 1:
                if(isButton2Pressed()) {
 8000ca6:	f7ff fbc5 	bl	8000434 <isButton2Pressed>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <update_button_state+0x70>
                    currState[i] = BTN_PRESS;
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <update_button_state+0xb4>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
                } else {
                    currState[i] = BTN_RELEASE;
                }
                break;
 8000cba:	e016      	b.n	8000cea <update_button_state+0x9e>
                    currState[i] = BTN_RELEASE;
 8000cbc:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <update_button_state+0xb4>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
                break;
 8000cc6:	e010      	b.n	8000cea <update_button_state+0x9e>

            /* ----------------------------------------------------------------
			 * NÚT 3: SET (Lưu giá trị)
			 * ---------------------------------------------------------------- */
            case 2:
                if(isButton3Pressed()) {
 8000cc8:	f7ff fbc6 	bl	8000458 <isButton3Pressed>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <update_button_state+0x92>
                    currState[i] = BTN_PRESS;
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <update_button_state+0xb4>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
                } else {
                    currState[i] = BTN_RELEASE;
                }
                break;
 8000cdc:	e004      	b.n	8000ce8 <update_button_state+0x9c>
                    currState[i] = BTN_RELEASE;
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <update_button_state+0xb4>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
                break;
 8000ce8:	bf00      	nop
    for(int i = 0; i < 3; i++) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3301      	adds	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	ddb0      	ble.n	8000c58 <update_button_state+0xc>
	 *   t=30ms:  prevState=PRESS,   currState=PRESS   (đang giữ, bỏ qua)
	 *   t=40ms:  prevState=PRESS,   currState=PRESS   (đang giữ, bỏ qua)
	 *   t=50ms:  prevState=PRESS,   currState=RELEASE (vừa thả, bỏ qua)
	 *   t=60ms:  prevState=RELEASE, currState=RELEASE (không nhấn)
	 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000d0 	.word	0x200000d0
 8000d04:	200000cc 	.word	0x200000cc

08000d08 <update_led_display>:
 * - MODE 2/3/4: Hiển thị LED nhấp nháy dựa trên các flag
 *
 * Được gọi: Liên tục trong vòng lặp chính hoặc từ timer
 */
void update_led_display(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    // ============ CHẾ ĐỘ HOẠT ĐỘNG BÌNH THƯỜNG ============
    if (current_mode == MODE_1_NORMAL)
 8000d0c:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <update_led_display+0xec>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d148      	bne.n	8000da6 <update_led_display+0x9e>
    {
        // Hiển thị đèn giao thông theo trạng thái finite state machine

        switch (traffic_state)
 8000d14:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <update_led_display+0xf0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d869      	bhi.n	8000df0 <update_led_display+0xe8>
 8000d1c:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <update_led_display+0x1c>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d39 	.word	0x08000d39
 8000d28:	08000d3f 	.word	0x08000d3f
 8000d2c:	08000d59 	.word	0x08000d59
 8000d30:	08000d73 	.word	0x08000d73
 8000d34:	08000d8d 	.word	0x08000d8d
        {
        case INIT:               // Trạng thái khởi tạo
            turn_off_all_leds(); // Tắt hết tất cả LED
 8000d38:	f000 f866 	bl	8000e08 <turn_off_all_leds>
            break;
 8000d3c:	e058      	b.n	8000df0 <update_led_display+0xe8>

        case RED_GREEN:                  // Đường 1: ĐỎ, Đường 2: XANH
            set_traffic_led(0, 1, 0, 0); // Đường 1: chỉ đỏ sáng
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 f885 	bl	8000e54 <set_traffic_led>
            set_traffic_led(1, 0, 0, 1); // Đường 2: chỉ xanh sáng
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 f87f 	bl	8000e54 <set_traffic_led>
            break;
 8000d56:	e04b      	b.n	8000df0 <update_led_display+0xe8>

        case RED_AMBER:                  // Đường 1: ĐỎ, Đường 2: VÀNG
            set_traffic_led(0, 1, 0, 0); // Đường 1: chỉ đỏ sáng
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f878 	bl	8000e54 <set_traffic_led>
            set_traffic_led(1, 0, 1, 0); // Đường 2: chỉ vàng sáng
 8000d64:	2300      	movs	r3, #0
 8000d66:	2201      	movs	r2, #1
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 f872 	bl	8000e54 <set_traffic_led>
            break;
 8000d70:	e03e      	b.n	8000df0 <update_led_display+0xe8>

        case GREEN_RED:                  // Đường 1: XANH, Đường 2: ĐỎ
            set_traffic_led(0, 0, 0, 1); // Đường 1: chỉ xanh sáng
 8000d72:	2301      	movs	r3, #1
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f86b 	bl	8000e54 <set_traffic_led>
            set_traffic_led(1, 1, 0, 0); // Đường 2: chỉ đỏ sáng
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	2101      	movs	r1, #1
 8000d84:	2001      	movs	r0, #1
 8000d86:	f000 f865 	bl	8000e54 <set_traffic_led>
            break;
 8000d8a:	e031      	b.n	8000df0 <update_led_display+0xe8>

        case AMBER_RED:                  // Đường 1: VÀNG, Đường 2: ĐỎ
            set_traffic_led(0, 0, 1, 0); // Đường 1: chỉ vàng sáng
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2100      	movs	r1, #0
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f85e 	bl	8000e54 <set_traffic_led>
            set_traffic_led(1, 1, 0, 0); // Đường 2: chỉ đỏ sáng
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 f858 	bl	8000e54 <set_traffic_led>
            break;
 8000da4:	e024      	b.n	8000df0 <update_led_display+0xe8>
    {
        // Hiển thị LED dựa trên các flag được cập nhật bởi handle_led_blinking()
        // Các flag này được thay đổi mỗi 500ms để tạo hiệu ứng nhấp nháy

        // Cập nhật đèn đỏ cả 2 đường
        displayLED_RED(flagRed[0], 0); // Đèn đỏ đường 1
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <update_led_display+0xf4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f8a5 	bl	8000efc <displayLED_RED>
        displayLED_RED(flagRed[1], 1); // Đèn đỏ đường 2
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <update_led_display+0xf4>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2101      	movs	r1, #1
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f89f 	bl	8000efc <displayLED_RED>

        // Cập nhật đèn vàng cả 2 đường
        displayLED_YELLOW(flagYellow[0], 0); // Đèn vàng đường 1
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <update_led_display+0xf8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f8c3 	bl	8000f50 <displayLED_YELLOW>
        displayLED_YELLOW(flagYellow[1], 1); // Đèn vàng đường 2
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <update_led_display+0xf8>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f8bd 	bl	8000f50 <displayLED_YELLOW>

        // Cập nhật đèn xanh cả 2 đường
        displayLED_GREEN(flagGreen[0], 0); // Đèn xanh đường 1
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <update_led_display+0xfc>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f8e3 	bl	8000fa8 <displayLED_GREEN>
        displayLED_GREEN(flagGreen[1], 1); // Đèn xanh đường 2
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <update_led_display+0xfc>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2101      	movs	r1, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f8dd 	bl	8000fa8 <displayLED_GREEN>
    }
}
 8000dee:	e7ff      	b.n	8000df0 <update_led_display+0xe8>
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000050 	.word	0x20000050
 8000df8:	200000a8 	.word	0x200000a8
 8000dfc:	200000b4 	.word	0x200000b4
 8000e00:	200000c4 	.word	0x200000c4
 8000e04:	200000bc 	.word	0x200000bc

08000e08 <turn_off_all_leds>:
 * Chức năng:
 * - Tắt 6 LED của 2 đường (3 LED mỗi đường)
 * - Sử dụng khi khởi tạo hoặc chuyển trạng thái
 */
void turn_off_all_leds(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
    // Tắt LED đường 1
    HAL_GPIO_WritePin(GPIOA, RED1_Pin, GPIO_PIN_RESET);    // Tắt đèn đỏ 1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2108      	movs	r1, #8
 8000e10:	480f      	ldr	r0, [pc, #60]	; (8000e50 <turn_off_all_leds+0x48>)
 8000e12:	f000 fe58 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, GPIO_PIN_RESET); // Tắt đèn vàng 1
 8000e16:	2200      	movs	r2, #0
 8000e18:	2120      	movs	r1, #32
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <turn_off_all_leds+0x48>)
 8000e1c:	f000 fe53 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, GPIO_PIN_RESET);  // Tắt đèn xanh 1
 8000e20:	2200      	movs	r2, #0
 8000e22:	2110      	movs	r1, #16
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <turn_off_all_leds+0x48>)
 8000e26:	f000 fe4e 	bl	8001ac6 <HAL_GPIO_WritePin>

    // Tắt LED đường 2
    HAL_GPIO_WritePin(GPIOA, RED2_Pin, GPIO_PIN_RESET);    // Tắt đèn đỏ 2
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	4808      	ldr	r0, [pc, #32]	; (8000e50 <turn_off_all_leds+0x48>)
 8000e30:	f000 fe49 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, GPIO_PIN_RESET); // Tắt đèn vàng 2
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <turn_off_all_leds+0x48>)
 8000e3c:	f000 fe43 	bl	8001ac6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, GPIO_PIN_RESET);  // Tắt đèn xanh 2
 8000e40:	2200      	movs	r2, #0
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <turn_off_all_leds+0x48>)
 8000e46:	f000 fe3e 	bl	8001ac6 <HAL_GPIO_WritePin>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010800 	.word	0x40010800

08000e54 <set_traffic_led>:
 * LƯU Ý: Logic đảo ngược!
 * - Tham số = 1 (sáng) → GPIO_PIN_RESET (vì LED active LOW)
 * - Tham số = 0 (tắt) → GPIO_PIN_SET
 */
void set_traffic_led(int road, int red, int amber, int green)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
    if (road == 0)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d121      	bne.n	8000eac <set_traffic_led+0x58>
    { // ĐƯỜNG 1
        // Đèn đỏ: nếu red=1 thì RESET (sáng), nếu red=0 thì SET (tắt)
        HAL_GPIO_WritePin(GPIOA, RED1_Pin, red ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf0c      	ite	eq
 8000e6e:	2301      	moveq	r3, #1
 8000e70:	2300      	movne	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	2108      	movs	r1, #8
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <set_traffic_led+0xa4>)
 8000e7a:	f000 fe24 	bl	8001ac6 <HAL_GPIO_WritePin>

        // Đèn vàng: nếu amber=1 thì RESET (sáng), nếu amber=0 thì SET (tắt)
        HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, amber ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	481a      	ldr	r0, [pc, #104]	; (8000ef8 <set_traffic_led+0xa4>)
 8000e90:	f000 fe19 	bl	8001ac6 <HAL_GPIO_WritePin>

        // Đèn xanh: nếu green=1 thì RESET (sáng), nếu green=0 thì SET (tắt)
        HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, green ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf0c      	ite	eq
 8000e9a:	2301      	moveq	r3, #1
 8000e9c:	2300      	movne	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <set_traffic_led+0xa4>)
 8000ea6:	f000 fe0e 	bl	8001ac6 <HAL_GPIO_WritePin>
        // Tương tự như đường 1 nhưng dùng các chân LED của đường 2
        HAL_GPIO_WritePin(GPIOA, RED2_Pin, red ? GPIO_PIN_RESET : GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, amber ? GPIO_PIN_RESET : GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, green ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 8000eaa:	e021      	b.n	8000ef0 <set_traffic_led+0x9c>
        HAL_GPIO_WritePin(GPIOA, RED2_Pin, red ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bf0c      	ite	eq
 8000eb2:	2301      	moveq	r3, #1
 8000eb4:	2300      	movne	r3, #0
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2140      	movs	r1, #64	; 0x40
 8000ebc:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <set_traffic_led+0xa4>)
 8000ebe:	f000 fe02 	bl	8001ac6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, amber ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf0c      	ite	eq
 8000ec8:	2301      	moveq	r3, #1
 8000eca:	2300      	movne	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <set_traffic_led+0xa4>)
 8000ed6:	f000 fdf6 	bl	8001ac6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, green ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <set_traffic_led+0xa4>)
 8000eec:	f000 fdeb 	bl	8001ac6 <HAL_GPIO_WritePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40010800 	.word	0x40010800

08000efc <displayLED_RED>:
 * @param index: Chỉ số đường (0 = Đường 1, 1 = Đường 2)
 *
 * Sử dụng: Chủ yếu trong chế độ blinking (nhấp nháy)
 */
void displayLED_RED(int IS_ON, int index)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    switch (index)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <displayLED_RED+0x18>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d00c      	beq.n	8000f2c <displayLED_RED+0x30>

    case 1: // Đường 2
        HAL_GPIO_WritePin(GPIOA, RED2_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
        break;
    }
}
 8000f12:	e017      	b.n	8000f44 <displayLED_RED+0x48>
        HAL_GPIO_WritePin(GPIOA, RED1_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	2108      	movs	r1, #8
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <displayLED_RED+0x50>)
 8000f26:	f000 fdce 	bl	8001ac6 <HAL_GPIO_WritePin>
        break;
 8000f2a:	e00b      	b.n	8000f44 <displayLED_RED+0x48>
        HAL_GPIO_WritePin(GPIOA, RED2_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2301      	movne	r3, #1
 8000f34:	2300      	moveq	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <displayLED_RED+0x50>)
 8000f3e:	f000 fdc2 	bl	8001ac6 <HAL_GPIO_WritePin>
        break;
 8000f42:	bf00      	nop
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40010800 	.word	0x40010800

08000f50 <displayLED_YELLOW>:
 *
 * @param IS_ON: Trạng thái mong muốn (1 = sáng, 0 = tắt)
 * @param index: Chỉ số đường (0 = Đường 1, 1 = Đường 2)
 */
void displayLED_YELLOW(int IS_ON, int index)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    switch (index)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <displayLED_YELLOW+0x18>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d00c      	beq.n	8000f80 <displayLED_YELLOW+0x30>

    case 1: // Đường 2
        HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
        break;
    }
}
 8000f66:	e018      	b.n	8000f9a <displayLED_YELLOW+0x4a>
        HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	2120      	movs	r1, #32
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <displayLED_YELLOW+0x54>)
 8000f7a:	f000 fda4 	bl	8001ac6 <HAL_GPIO_WritePin>
        break;
 8000f7e:	e00c      	b.n	8000f9a <displayLED_YELLOW+0x4a>
        HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <displayLED_YELLOW+0x54>)
 8000f94:	f000 fd97 	bl	8001ac6 <HAL_GPIO_WritePin>
        break;
 8000f98:	bf00      	nop
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <displayLED_GREEN>:
 *
 * @param IS_ON: Trạng thái mong muốn (1 = sáng, 0 = tắt)
 * @param index: Chỉ số đường (0 = Đường 1, 1 = Đường 2)
 */
void displayLED_GREEN(int IS_ON, int index)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    switch (index)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <displayLED_GREEN+0x18>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d00c      	beq.n	8000fd8 <displayLED_GREEN+0x30>

    case 1: // Đường 2
        HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
        break;
    }
}
 8000fbe:	e017      	b.n	8000ff0 <displayLED_GREEN+0x48>
        HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2110      	movs	r1, #16
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <displayLED_GREEN+0x50>)
 8000fd2:	f000 fd78 	bl	8001ac6 <HAL_GPIO_WritePin>
        break;
 8000fd6:	e00b      	b.n	8000ff0 <displayLED_GREEN+0x48>
        HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, IS_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	bf14      	ite	ne
 8000fde:	2301      	movne	r3, #1
 8000fe0:	2300      	moveq	r3, #0
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <displayLED_GREEN+0x50>)
 8000fea:	f000 fd6c 	bl	8001ac6 <HAL_GPIO_WritePin>
        break;
 8000fee:	bf00      	nop
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010800 	.word	0x40010800

08000ffc <handle_led_blinking>:
 * - Sau 50 lần gọi (500ms) → đổi trạng thái LED
 * - Chu kỳ: 500ms sáng + 500ms tắt = 1 giây (tần số 1Hz)
 * - Chỉ LED đang được điều chỉnh mới nhấp nháy, các LED khác TẮT
 */
void handle_led_blinking(int led_type)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    // Tăng bộ đếm nhấp nháy
    blink_counter++;
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <handle_led_blinking+0xb8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <handle_led_blinking+0xb8>)
 800100c:	6013      	str	r3, [r2, #0]
    // Kiểm tra đã đủ thời gian chưa (50 x 10ms = 500ms)
    if (blink_counter >= MAX_BLINK_COUNTER)
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <handle_led_blinking+0xb8>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <handle_led_blinking+0xbc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	db46      	blt.n	80010a8 <handle_led_blinking+0xac>
    {
        // Reset bộ đếm về 0 để bắt đầu chu kỳ mới
        blink_counter = 0;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <handle_led_blinking+0xb8>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
        // Đảo trạng thái cờ nhấp nháy: 0→1 hoặc 1→0
        // flag_blink = 0: LED tắt trong chu kỳ này
        // flag_blink = 1: LED sáng trong chu kỳ này
        flag_blink = !flag_blink;
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <handle_led_blinking+0xc0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <handle_led_blinking+0xc0>)
 8001032:	601a      	str	r2, [r3, #0]
        // ============ BƯỚC 1: TẮT TẤT CẢ CÁC LED ============
        // Set tất cả flag = 1 (tắt) vì active LOW
        // Điều này đảm bảo chỉ có LED đang điều chỉnh mới có thể sáng
        flagRed[0] = 1;    // Tắt đèn đỏ đường 1
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <handle_led_blinking+0xc4>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]
        flagRed[1] = 1;    // Tắt đèn đỏ đường 2
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <handle_led_blinking+0xc4>)
 800103c:	2201      	movs	r2, #1
 800103e:	605a      	str	r2, [r3, #4]
        flagGreen[0] = 1;  // Tắt đèn xanh đường 1
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <handle_led_blinking+0xc8>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
        flagGreen[1] = 1;  // Tắt đèn xanh đường 2
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <handle_led_blinking+0xc8>)
 8001048:	2201      	movs	r2, #1
 800104a:	605a      	str	r2, [r3, #4]
        flagYellow[0] = 1; // Tắt đèn vàng đường 1
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <handle_led_blinking+0xcc>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
        flagYellow[1] = 1; // Tắt đèn vàng đường 2
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <handle_led_blinking+0xcc>)
 8001054:	2201      	movs	r2, #1
 8001056:	605a      	str	r2, [r3, #4]
        // ============ BƯỚC 2: CHỈ BẬT LED ĐANG ĐIỀU CHỈNH ============
        // Dựa vào led_type để quyết định LED nào được nhấp nháy
        switch (led_type)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d01b      	beq.n	8001096 <handle_led_blinking+0x9a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b02      	cmp	r3, #2
 8001062:	dc22      	bgt.n	80010aa <handle_led_blinking+0xae>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <handle_led_blinking+0x76>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d009      	beq.n	8001084 <handle_led_blinking+0x88>

            break;
        }
    }
    // Nếu chưa đủ 500ms thì không làm gì, chỉ tăng counter
}
 8001070:	e01b      	b.n	80010aa <handle_led_blinking+0xae>
            flagRed[0] = flag_blink;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <handle_led_blinking+0xc0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <handle_led_blinking+0xc4>)
 8001078:	6013      	str	r3, [r2, #0]
            flagRed[1] = flag_blink;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <handle_led_blinking+0xc0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <handle_led_blinking+0xc4>)
 8001080:	6053      	str	r3, [r2, #4]
            break;
 8001082:	e012      	b.n	80010aa <handle_led_blinking+0xae>
                    flagYellow[0] = flag_blink;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <handle_led_blinking+0xc0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <handle_led_blinking+0xcc>)
 800108a:	6013      	str	r3, [r2, #0]
                    flagYellow[1] = flag_blink;
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <handle_led_blinking+0xc0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <handle_led_blinking+0xcc>)
 8001092:	6053      	str	r3, [r2, #4]
                    break;
 8001094:	e009      	b.n	80010aa <handle_led_blinking+0xae>
            flagGreen[0] = flag_blink; // 0=tắt, 1=sáng theo chu kỳ
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <handle_led_blinking+0xc0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <handle_led_blinking+0xc8>)
 800109c:	6013      	str	r3, [r2, #0]
            flagGreen[1] = flag_blink;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <handle_led_blinking+0xc0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <handle_led_blinking+0xc8>)
 80010a4:	6053      	str	r3, [r2, #4]
            break;
 80010a6:	e000      	b.n	80010aa <handle_led_blinking+0xae>
    }
 80010a8:	bf00      	nop
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	200000ac 	.word	0x200000ac
 80010b8:	20000054 	.word	0x20000054
 80010bc:	200000b0 	.word	0x200000b0
 80010c0:	200000b4 	.word	0x200000b4
 80010c4:	200000bc 	.word	0x200000bc
 80010c8:	200000c4 	.word	0x200000c4

080010cc <HAL_TIM_PeriodElapsedCallback>:
  * - Hàm này được gọi TỰ ĐỘNG mỗi khi Timer 2 tràn (overflow)
  * - Thời gian gọi phụ thuộc vào cấu hình Timer (thường là 10ms)
  * - Đây là "tim đập" của hệ thống - mọi xử lý theo thời gian đều dựa vào đây
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    // Kiểm tra xem ngắt có phải từ Timer 2 không
    if (htim->Instance == TIM2) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d105      	bne.n	80010ea <HAL_TIM_PeriodElapsedCallback+0x1e>

        // 1. Cập nhật bộ đếm timer phần mềm
        //    - Giảm giá trị các timer đã set
        //    - Kiểm tra timer nào hết thời gian
        timerRun();
 80010de:	f000 f90d 	bl	80012fc <timerRun>

        // 2. Đọc trạng thái các nút nhấn
        //    - Quét trạng thái nút (nhấn/thả)
        //    - Xử lý chống dội phím (debounce)
        //    - Phát hiện sự kiện nhấn (pressed/long pressed)
        getKeyInput();
 80010e2:	f7ff f9db 	bl	800049c <getKeyInput>

        // 3. Chạy máy trạng thái điều khiển đèn giao thông
        //    - Xử lý logic chuyển đèn đỏ-vàng-xanh
        //    - Cập nhật LED 7 đoạn
        //    - Xử lý các mode (normal, adjust red, adjust yellow, adjust green)
        traffic_run();
 80010e6:	f7ff fb05 	bl	80006f4 <traffic_run>
    }
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 f9e4 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f80c 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f892 	bl	8001228 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001104:	f000 f844 	bl	8001190 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Khởi tạo hệ thống đèn giao thông
  traffic_init();
 8001108:	f7ff fa8a 	bl	8000620 <traffic_init>
  // Bật Timer interrupt
  HAL_TIM_Base_Start_IT(&htim2);
 800110c:	4801      	ldr	r0, [pc, #4]	; (8001114 <main+0x20>)
 800110e:	f001 f91f 	bl	8002350 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001112:	e7fe      	b.n	8001112 <main+0x1e>
 8001114:	20000124 	.word	0x20000124

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	; 0x40
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2228      	movs	r2, #40	; 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fcc2 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113e:	2301      	movs	r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001142:	2310      	movs	r3, #16
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001146:	2300      	movs	r3, #0
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fcd2 	bl	8001af8 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800115a:	f000 f8c9 	bl	80012f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f000 ff3e 	bl	8001ff8 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001182:	f000 f8b5 	bl	80012f0 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3740      	adds	r7, #64	; 0x40
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM2_Init+0x94>)
 80011ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_TIM2_Init+0x94>)
 80011b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM2_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_TIM2_Init+0x94>)
 80011c4:	2209      	movs	r2, #9
 80011c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_TIM2_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM2_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <MX_TIM2_Init+0x94>)
 80011d6:	f001 f86b 	bl	80022b0 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e0:	f000 f886 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_TIM2_Init+0x94>)
 80011f2:	f001 f9e9 	bl	80025c8 <HAL_TIM_ConfigClockSource>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011fc:	f000 f878 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_TIM2_Init+0x94>)
 800120e:	f001 fbc1 	bl	8002994 <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001218:	f000 f86a 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000124 	.word	0x20000124

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_GPIO_Init+0xbc>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <MX_GPIO_Init+0xbc>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_GPIO_Init+0xbc>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_GPIO_Init+0xbc>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <MX_GPIO_Init+0xbc>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_GPIO_Init+0xbc>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 800126c:	2200      	movs	r2, #0
 800126e:	f24f 11f8 	movw	r1, #61944	; 0xf1f8
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <MX_GPIO_Init+0xc0>)
 8001274:	f000 fc27 	bl	8001ac6 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin|inputseg0_0_Pin|inputseg0_1_Pin
                          |inputseg0_2_Pin|inputseg0_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, inputseg1_0_Pin|inputseg1_1_Pin|inputseg1_2_Pin|inputseg3_2_Pin
 8001278:	2200      	movs	r2, #0
 800127a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800127e:	481b      	ldr	r0, [pc, #108]	; (80012ec <MX_GPIO_Init+0xc4>)
 8001280:	f000 fc21 	bl	8001ac6 <HAL_GPIO_WritePin>
                          |inputseg2_2_Pin|inputseg2_3_Pin|inputseg3_0_Pin|inputseg3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin inputseg0_0_Pin inputseg0_1_Pin
                           inputseg0_2_Pin inputseg0_3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8001284:	f24f 13f8 	movw	r3, #61944	; 0xf1f8
 8001288:	60bb      	str	r3, [r7, #8]
                          |GREEN2_Pin|YELLOW2_Pin|inputseg0_0_Pin|inputseg0_1_Pin
                          |inputseg0_2_Pin|inputseg0_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2302      	movs	r3, #2
 8001294:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4619      	mov	r1, r3
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <MX_GPIO_Init+0xc0>)
 800129e:	f000 fa81 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : inputseg1_0_Pin inputseg1_1_Pin inputseg1_2_Pin inputseg3_2_Pin
                           inputseg3_3_Pin inputmode_0_Pin inputmode_1_Pin inputmode_2_Pin
                           inputmode_3_Pin inputseg1_3_Pin inputseg2_0_Pin inputseg2_1_Pin
                           inputseg2_2_Pin inputseg2_3_Pin inputseg3_0_Pin inputseg3_1_Pin */
  GPIO_InitStruct.Pin = inputseg1_0_Pin|inputseg1_1_Pin|inputseg1_2_Pin|inputseg3_2_Pin
 80012a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a6:	60bb      	str	r3, [r7, #8]
                          |inputseg3_3_Pin|inputmode_0_Pin|inputmode_1_Pin|inputmode_2_Pin
                          |inputmode_3_Pin|inputseg1_3_Pin|inputseg2_0_Pin|inputseg2_1_Pin
                          |inputseg2_2_Pin|inputseg2_3_Pin|inputseg3_0_Pin|inputseg3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2302      	movs	r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4619      	mov	r1, r3
 80012ba:	480c      	ldr	r0, [pc, #48]	; (80012ec <MX_GPIO_Init+0xc4>)
 80012bc:	f000 fa72 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 80012c0:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80012c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4619      	mov	r1, r3
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_GPIO_Init+0xc0>)
 80012d6:	f000 fa65 	bl	80017a4 <HAL_GPIO_Init>

}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40010c00 	.word	0x40010c00

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <timerRun>:
// Hàm cập nhật trạng thái các timer
// Hàm này phải được gọi định kỳ trong ngắt Timer cứng
// Ví dụ: nếu Timer cứng gọi mỗi 1ms -> timerRun giảm giá trị counter mỗi 1ms
//--------------------------------------------------------
void timerRun()
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_COUNTER; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	e01c      	b.n	8001342 <timerRun+0x46>
    { // Quét qua tất cả các timer
        if (timer_counter[i] > 0)
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <timerRun+0x58>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd13      	ble.n	800133c <timerRun+0x40>
        {                       // Nếu timer đang chạy
            timer_counter[i]--; // Giảm giá trị đếm đi 1
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <timerRun+0x58>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	490d      	ldr	r1, [pc, #52]	; (8001354 <timerRun+0x58>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (timer_counter[i] <= 0)
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <timerRun+0x58>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	2b00      	cmp	r3, #0
 8001330:	dc04      	bgt.n	800133c <timerRun+0x40>
            {                      // Nếu đếm về 0
                timer_flag[i] = 1; // Đặt cờ báo hết hạn
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <timerRun+0x5c>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2101      	movs	r1, #1
 8001338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_COUNTER; i++)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3301      	adds	r3, #1
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b09      	cmp	r3, #9
 8001346:	dddf      	ble.n	8001308 <timerRun+0xc>
            }
        }
    }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	200000d4 	.word	0x200000d4
 8001358:	200000fc 	.word	0x200000fc

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_MspInit+0x5c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_MspInit+0x5c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_MspInit+0x5c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_MspInit+0x5c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_MspInit+0x60>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_MspInit+0x60>)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d0:	d113      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201c      	movs	r0, #28
 80013f0:	f000 f9a1 	bl	8001736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f4:	201c      	movs	r0, #28
 80013f6:	f000 f9ba 	bl	800176e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144e:	f000 f87f 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <TIM2_IRQHandler+0x10>)
 800145e:	f000 ffc3 	bl	80023e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000124 	.word	0x20000124

0800146c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001478:	f7ff fff8 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800147e:	490c      	ldr	r1, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001480:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001494:	4c09      	ldr	r4, [pc, #36]	; (80014bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f001 fae1 	bl	8002a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a6:	f7ff fe25 	bl	80010f4 <main>
  bx lr
 80014aa:	4770      	bx	lr
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80014b4:	08002b04 	.word	0x08002b04
  ldr r2, =_sbss
 80014b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80014bc:	20000170 	.word	0x20000170

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x28>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f923 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	200f      	movs	r0, #15
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff ff3c 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f93b 	bl	800178a <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f903 	bl	8001736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000058 	.word	0x20000058
 8001548:	20000060 	.word	0x20000060
 800154c:	2000005c 	.word	0x2000005c

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x1c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x20>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <HAL_IncTick+0x20>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000060 	.word	0x20000060
 8001570:	2000016c 	.word	0x2000016c

08001574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_GetTick+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	2000016c 	.word	0x2000016c

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4906      	ldr	r1, [pc, #24]	; (8001620 <__NVIC_EnableIRQ+0x34>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f7ff ff90 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff2d 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff42 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff90 	bl	8001678 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5f 	bl	8001624 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff35 	bl	80015ec <__NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffa2 	bl	80016dc <SysTick_Config>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b08b      	sub	sp, #44	; 0x2c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b6:	e148      	b.n	8001a4a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b8:	2201      	movs	r2, #1
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 8137 	bne.w	8001a44 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4aa3      	ldr	r2, [pc, #652]	; (8001a68 <HAL_GPIO_Init+0x2c4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d05e      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017e0:	4aa1      	ldr	r2, [pc, #644]	; (8001a68 <HAL_GPIO_Init+0x2c4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d875      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017e6:	4aa1      	ldr	r2, [pc, #644]	; (8001a6c <HAL_GPIO_Init+0x2c8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d058      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017ec:	4a9f      	ldr	r2, [pc, #636]	; (8001a6c <HAL_GPIO_Init+0x2c8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d86f      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017f2:	4a9f      	ldr	r2, [pc, #636]	; (8001a70 <HAL_GPIO_Init+0x2cc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d052      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017f8:	4a9d      	ldr	r2, [pc, #628]	; (8001a70 <HAL_GPIO_Init+0x2cc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d869      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d04c      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 8001804:	4a9b      	ldr	r2, [pc, #620]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d863      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 800180a:	4a9b      	ldr	r2, [pc, #620]	; (8001a78 <HAL_GPIO_Init+0x2d4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d046      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 8001810:	4a99      	ldr	r2, [pc, #612]	; (8001a78 <HAL_GPIO_Init+0x2d4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d85d      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d82a      	bhi.n	8001870 <HAL_GPIO_Init+0xcc>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d859      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_GPIO_Init+0x80>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	0800189f 	.word	0x0800189f
 8001828:	08001879 	.word	0x08001879
 800182c:	0800188b 	.word	0x0800188b
 8001830:	080018cd 	.word	0x080018cd
 8001834:	080018d3 	.word	0x080018d3
 8001838:	080018d3 	.word	0x080018d3
 800183c:	080018d3 	.word	0x080018d3
 8001840:	080018d3 	.word	0x080018d3
 8001844:	080018d3 	.word	0x080018d3
 8001848:	080018d3 	.word	0x080018d3
 800184c:	080018d3 	.word	0x080018d3
 8001850:	080018d3 	.word	0x080018d3
 8001854:	080018d3 	.word	0x080018d3
 8001858:	080018d3 	.word	0x080018d3
 800185c:	080018d3 	.word	0x080018d3
 8001860:	080018d3 	.word	0x080018d3
 8001864:	080018d3 	.word	0x080018d3
 8001868:	08001881 	.word	0x08001881
 800186c:	08001895 	.word	0x08001895
 8001870:	4a82      	ldr	r2, [pc, #520]	; (8001a7c <HAL_GPIO_Init+0x2d8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001876:	e02c      	b.n	80018d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e029      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	3304      	adds	r3, #4
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e024      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	3308      	adds	r3, #8
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e01f      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	330c      	adds	r3, #12
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e01a      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a6:	2304      	movs	r3, #4
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e013      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	611a      	str	r2, [r3, #16]
          break;
 80018be:	e009      	b.n	80018d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c0:	2308      	movs	r3, #8
 80018c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	615a      	str	r2, [r3, #20]
          break;
 80018ca:	e003      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          break;
 80018d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2bff      	cmp	r3, #255	; 0xff
 80018d8:	d801      	bhi.n	80018de <HAL_GPIO_Init+0x13a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	e001      	b.n	80018e2 <HAL_GPIO_Init+0x13e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3304      	adds	r3, #4
 80018e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d802      	bhi.n	80018f0 <HAL_GPIO_Init+0x14c>
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x152>
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	3b08      	subs	r3, #8
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	210f      	movs	r1, #15
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	401a      	ands	r2, r3
 8001908:	6a39      	ldr	r1, [r7, #32]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8090 	beq.w	8001a44 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <HAL_GPIO_Init+0x2dc>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a55      	ldr	r2, [pc, #340]	; (8001a80 <HAL_GPIO_Init+0x2dc>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_GPIO_Init+0x2dc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800193c:	4a51      	ldr	r2, [pc, #324]	; (8001a84 <HAL_GPIO_Init+0x2e0>)
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_GPIO_Init+0x2e4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00d      	beq.n	8001984 <HAL_GPIO_Init+0x1e0>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2e8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d007      	beq.n	8001980 <HAL_GPIO_Init+0x1dc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_GPIO_Init+0x2ec>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_GPIO_Init+0x1d8>
 8001978:	2302      	movs	r3, #2
 800197a:	e004      	b.n	8001986 <HAL_GPIO_Init+0x1e2>
 800197c:	2303      	movs	r3, #3
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x1e2>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_GPIO_Init+0x1e2>
 8001984:	2300      	movs	r3, #0
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4093      	lsls	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001996:	493b      	ldr	r1, [pc, #236]	; (8001a84 <HAL_GPIO_Init+0x2e0>)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b0:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	4937      	ldr	r1, [pc, #220]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019be:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4933      	ldr	r1, [pc, #204]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	492d      	ldr	r1, [pc, #180]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019e6:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4929      	ldr	r1, [pc, #164]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4923      	ldr	r1, [pc, #140]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	491f      	ldr	r1, [pc, #124]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4919      	ldr	r1, [pc, #100]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4915      	ldr	r1, [pc, #84]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	3301      	adds	r3, #1
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f47f aeaf 	bne.w	80017b8 <HAL_GPIO_Init+0x14>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	372c      	adds	r7, #44	; 0x2c
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	10320000 	.word	0x10320000
 8001a6c:	10310000 	.word	0x10310000
 8001a70:	10220000 	.word	0x10220000
 8001a74:	10210000 	.word	0x10210000
 8001a78:	10120000 	.word	0x10120000
 8001a7c:	10110000 	.word	0x10110000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	40010c00 	.word	0x40010c00
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e001      	b.n	8001aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	807b      	strh	r3, [r7, #2]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad6:	787b      	ldrb	r3, [r7, #1]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001adc:	887a      	ldrh	r2, [r7, #2]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae2:	e003      	b.n	8001aec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	041a      	lsls	r2, r3, #16
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	611a      	str	r2, [r3, #16]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e26c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8087 	beq.w	8001c26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b18:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d00c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b24:	4b8f      	ldr	r3, [pc, #572]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d112      	bne.n	8001b56 <HAL_RCC_OscConfig+0x5e>
 8001b30:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3c:	d10b      	bne.n	8001b56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3e:	4b89      	ldr	r3, [pc, #548]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d06c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x12c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d168      	bne.n	8001c24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e246      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x76>
 8001b60:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a7f      	ldr	r2, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e02e      	b.n	8001bcc <HAL_RCC_OscConfig+0xd4>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x98>
 8001b76:	4b7b      	ldr	r3, [pc, #492]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a7a      	ldr	r2, [pc, #488]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b78      	ldr	r3, [pc, #480]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a77      	ldr	r2, [pc, #476]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xd4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xbc>
 8001b9a:	4b72      	ldr	r3, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a71      	ldr	r2, [pc, #452]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b6f      	ldr	r3, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6e      	ldr	r2, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xd4>
 8001bb4:	4b6b      	ldr	r3, [pc, #428]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a6a      	ldr	r2, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a67      	ldr	r2, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fcce 	bl	8001574 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fcca 	bl	8001574 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1fa      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xe4>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fcba 	bl	8001574 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fcb6 	bl	8001574 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1e6      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x10c>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d063      	beq.n	8001cfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c32:	4b4c      	ldr	r3, [pc, #304]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c3e:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x18c>
 8001c4a:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x176>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1ba      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4939      	ldr	r1, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	e03a      	b.n	8001cfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fc6f 	bl	8001574 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fc6b 	bl	8001574 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e19b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4927      	ldr	r1, [pc, #156]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc4e 	bl	8001574 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fc4a 	bl	8001574 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e17a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d03a      	beq.n	8001d7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d019      	beq.n	8001d42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff fc2e 	bl	8001574 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc2a 	bl	8001574 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e15a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f000 fa9a 	bl	8002274 <RCC_Delay>
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d48:	f7ff fc14 	bl	8001574 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4e:	e00f      	b.n	8001d70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fc10 	bl	8001574 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d908      	bls.n	8001d70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e140      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	42420000 	.word	0x42420000
 8001d6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	4b9e      	ldr	r3, [pc, #632]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e9      	bne.n	8001d50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80a6 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4b97      	ldr	r3, [pc, #604]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10d      	bne.n	8001db6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b94      	ldr	r3, [pc, #592]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a93      	ldr	r2, [pc, #588]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b91      	ldr	r3, [pc, #580]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	4b8e      	ldr	r3, [pc, #568]	; (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a8a      	ldr	r2, [pc, #552]	; (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dce:	f7ff fbd1 	bl	8001574 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7ff fbcd 	bl	8001574 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b64      	cmp	r3, #100	; 0x64
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0fd      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <HAL_RCC_OscConfig+0x4f8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x312>
 8001dfc:	4b7b      	ldr	r3, [pc, #492]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a7a      	ldr	r2, [pc, #488]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	e02d      	b.n	8001e66 <HAL_RCC_OscConfig+0x36e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x334>
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a75      	ldr	r2, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a72      	ldr	r2, [pc, #456]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	e01c      	b.n	8001e66 <HAL_RCC_OscConfig+0x36e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x356>
 8001e34:	4b6d      	ldr	r3, [pc, #436]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a6c      	ldr	r2, [pc, #432]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a69      	ldr	r2, [pc, #420]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e00b      	b.n	8001e66 <HAL_RCC_OscConfig+0x36e>
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a66      	ldr	r2, [pc, #408]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a63      	ldr	r2, [pc, #396]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d015      	beq.n	8001e9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb81 	bl	8001574 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff fb7d 	bl	8001574 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0ab      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	4b57      	ldr	r3, [pc, #348]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ee      	beq.n	8001e76 <HAL_RCC_OscConfig+0x37e>
 8001e98:	e014      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fb6b 	bl	8001574 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fb67 	bl	8001574 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e095      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ee      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d105      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eca:	4b48      	ldr	r3, [pc, #288]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a47      	ldr	r2, [pc, #284]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8081 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee0:	4b42      	ldr	r3, [pc, #264]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d061      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d146      	bne.n	8001f82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <HAL_RCC_OscConfig+0x4fc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fb3b 	bl	8001574 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff fb37 	bl	8001574 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e067      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d108      	bne.n	8001f3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	492d      	ldr	r1, [pc, #180]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a19      	ldr	r1, [r3, #32]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	4927      	ldr	r1, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x4fc>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fb0b 	bl	8001574 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff fb07 	bl	8001574 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e037      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x46a>
 8001f80:	e02f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_RCC_OscConfig+0x4fc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff faf4 	bl	8001574 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff faf0 	bl	8001574 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e020      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x498>
 8001fae:	e018      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e013      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	42420060 	.word	0x42420060

08001ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0d0      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800200c:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d910      	bls.n	800203c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4965      	ldr	r1, [pc, #404]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0b8      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800205e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002076:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	494d      	ldr	r1, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d040      	beq.n	8002118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d115      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e07f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e073      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06b      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4936      	ldr	r1, [pc, #216]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e8:	f7ff fa44 	bl	8001574 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7ff fa40 	bl	8001574 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e053      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 020c 	and.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	429a      	cmp	r2, r3
 8002116:	d1eb      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d210      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 0207 	bic.w	r2, r3, #7
 800212e:	4922      	ldr	r1, [pc, #136]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e032      	b.n	80021ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002186:	f000 f821 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800218a:	4602      	mov	r2, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	490a      	ldr	r1, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	5ccb      	ldrb	r3, [r1, r3]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1cc>)
 80021a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1d0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f9a2 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40022000 	.word	0x40022000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08002ad8 	.word	0x08002ad8
 80021c4:	20000058 	.word	0x20000058
 80021c8:	2000005c 	.word	0x2000005c

080021cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_RCC_GetSysClockFreq+0x94>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x30>
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x36>
 80021fa:	e027      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_GetSysClockFreq+0x98>)
 80021fe:	613b      	str	r3, [r7, #16]
      break;
 8002200:	e027      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	0c9b      	lsrs	r3, r3, #18
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_RCC_GetSysClockFreq+0x9c>)
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d010      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_GetSysClockFreq+0x94>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0c5b      	lsrs	r3, r3, #17
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <HAL_RCC_GetSysClockFreq+0x98>)
 800222e:	fb02 f203 	mul.w	r2, r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e004      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	613b      	str	r3, [r7, #16]
      break;
 800224a:	e002      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetSysClockFreq+0x98>)
 800224e:	613b      	str	r3, [r7, #16]
      break;
 8002250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002252:	693b      	ldr	r3, [r7, #16]
}
 8002254:	4618      	mov	r0, r3
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	007a1200 	.word	0x007a1200
 8002268:	08002ae8 	.word	0x08002ae8
 800226c:	08002af8 	.word	0x08002af8
 8002270:	003d0900 	.word	0x003d0900

08002274 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <RCC_Delay+0x34>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <RCC_Delay+0x38>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0a5b      	lsrs	r3, r3, #9
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002290:	bf00      	nop
  }
  while (Delay --);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	60fa      	str	r2, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f9      	bne.n	8002290 <RCC_Delay+0x1c>
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000058 	.word	0x20000058
 80022ac:	10624dd3 	.word	0x10624dd3

080022b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e041      	b.n	8002346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff f872 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f000 fa56 	bl	80027a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d001      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e035      	b.n	80023d4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_TIM_Base_Start_IT+0x90>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_TIM_Base_Start_IT+0x4e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d004      	beq.n	800239e <HAL_TIM_Base_Start_IT+0x4e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <HAL_TIM_Base_Start_IT+0x94>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d111      	bne.n	80023c2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d010      	beq.n	80023d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c0:	e007      	b.n	80023d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40000400 	.word	0x40000400

080023e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0202 	mvn.w	r2, #2
 800241c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f998 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f98b 	bl	8002756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f99a 	bl	800277a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d020      	beq.n	8002498 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0204 	mvn.w	r2, #4
 8002468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f972 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f965 	bl	8002756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f974 	bl	800277a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d020      	beq.n	80024e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01b      	beq.n	80024e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0208 	mvn.w	r2, #8
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2204      	movs	r2, #4
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f94c 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f93f 	bl	8002756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f94e 	bl	800277a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d020      	beq.n	8002530 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01b      	beq.n	8002530 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0210 	mvn.w	r2, #16
 8002500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2208      	movs	r2, #8
 8002506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f926 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f919 	bl	8002756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f928 	bl	800277a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0201 	mvn.w	r2, #1
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fdbc 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa6f 	bl	8002a56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8f8 	bl	800278c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0220 	mvn.w	r2, #32
 80025b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa42 	bl	8002a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_TIM_ConfigClockSource+0x1c>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0b4      	b.n	800274e <HAL_TIM_ConfigClockSource+0x186>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800260a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261c:	d03e      	beq.n	800269c <HAL_TIM_ConfigClockSource+0xd4>
 800261e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002622:	f200 8087 	bhi.w	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262a:	f000 8086 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x172>
 800262e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002632:	d87f      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002634:	2b70      	cmp	r3, #112	; 0x70
 8002636:	d01a      	beq.n	800266e <HAL_TIM_ConfigClockSource+0xa6>
 8002638:	2b70      	cmp	r3, #112	; 0x70
 800263a:	d87b      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 800263c:	2b60      	cmp	r3, #96	; 0x60
 800263e:	d050      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002640:	2b60      	cmp	r3, #96	; 0x60
 8002642:	d877      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002644:	2b50      	cmp	r3, #80	; 0x50
 8002646:	d03c      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002648:	2b50      	cmp	r3, #80	; 0x50
 800264a:	d873      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d058      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x13a>
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d86f      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002654:	2b30      	cmp	r3, #48	; 0x30
 8002656:	d064      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x15a>
 8002658:	2b30      	cmp	r3, #48	; 0x30
 800265a:	d86b      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d060      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x15a>
 8002660:	2b20      	cmp	r3, #32
 8002662:	d867      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05c      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x15a>
 8002668:	2b10      	cmp	r3, #16
 800266a:	d05a      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x15a>
 800266c:	e062      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f000 f96a 	bl	8002956 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	609a      	str	r2, [r3, #8]
      break;
 800269a:	e04f      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f000 f953 	bl	8002956 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026be:	609a      	str	r2, [r3, #8]
      break;
 80026c0:	e03c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 f8ca 	bl	8002868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2150      	movs	r1, #80	; 0x50
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f921 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e02c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f8e8 	bl	80028c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2160      	movs	r1, #96	; 0x60
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f911 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002700:	e01c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	461a      	mov	r2, r3
 8002710:	f000 f8aa 	bl	8002868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2140      	movs	r1, #64	; 0x40
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f901 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002720:	e00c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f000 f8f8 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002732:	e003      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      break;
 8002738:	e000      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800273a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
	...

080027a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <TIM_Base_SetConfig+0xc0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d007      	beq.n	80027c8 <TIM_Base_SetConfig+0x28>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027be:	d003      	beq.n	80027c8 <TIM_Base_SetConfig+0x28>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a28      	ldr	r2, [pc, #160]	; (8002864 <TIM_Base_SetConfig+0xc4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d108      	bne.n	80027da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a20      	ldr	r2, [pc, #128]	; (8002860 <TIM_Base_SetConfig+0xc0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <TIM_Base_SetConfig+0x52>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d003      	beq.n	80027f2 <TIM_Base_SetConfig+0x52>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <TIM_Base_SetConfig+0xc4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d108      	bne.n	8002804 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <TIM_Base_SetConfig+0xc0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d103      	bne.n	8002838 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	611a      	str	r2, [r3, #16]
  }
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012c00 	.word	0x40012c00
 8002864:	40000400 	.word	0x40000400

08002868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f023 0201 	bic.w	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 030a 	bic.w	r3, r3, #10
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	621a      	str	r2, [r3, #32]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0210 	bic.w	r2, r3, #16
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002900:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	621a      	str	r2, [r3, #32]
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	f043 0307 	orr.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002956:	b480      	push	{r7}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002970:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	021a      	lsls	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4313      	orrs	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	609a      	str	r2, [r3, #8]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e041      	b.n	8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d004      	beq.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10c      	bne.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400

08002a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <__libc_init_array>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	2600      	movs	r6, #0
 8002a6c:	4d0c      	ldr	r5, [pc, #48]	; (8002aa0 <__libc_init_array+0x38>)
 8002a6e:	4c0d      	ldr	r4, [pc, #52]	; (8002aa4 <__libc_init_array+0x3c>)
 8002a70:	1b64      	subs	r4, r4, r5
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	42a6      	cmp	r6, r4
 8002a76:	d109      	bne.n	8002a8c <__libc_init_array+0x24>
 8002a78:	f000 f822 	bl	8002ac0 <_init>
 8002a7c:	2600      	movs	r6, #0
 8002a7e:	4d0a      	ldr	r5, [pc, #40]	; (8002aa8 <__libc_init_array+0x40>)
 8002a80:	4c0a      	ldr	r4, [pc, #40]	; (8002aac <__libc_init_array+0x44>)
 8002a82:	1b64      	subs	r4, r4, r5
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	42a6      	cmp	r6, r4
 8002a88:	d105      	bne.n	8002a96 <__libc_init_array+0x2e>
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a90:	4798      	blx	r3
 8002a92:	3601      	adds	r6, #1
 8002a94:	e7ee      	b.n	8002a74 <__libc_init_array+0xc>
 8002a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a9a:	4798      	blx	r3
 8002a9c:	3601      	adds	r6, #1
 8002a9e:	e7f2      	b.n	8002a86 <__libc_init_array+0x1e>
 8002aa0:	08002afc 	.word	0x08002afc
 8002aa4:	08002afc 	.word	0x08002afc
 8002aa8:	08002afc 	.word	0x08002afc
 8002aac:	08002b00 	.word	0x08002b00

08002ab0 <memset>:
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4402      	add	r2, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
